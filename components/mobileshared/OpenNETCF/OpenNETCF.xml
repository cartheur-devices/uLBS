<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenNETCF</name>
    </assembly>
    <members>
        <member name="T:OpenNETCF.IO.FileSystemWatcher">
            <summary>
            Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.
            </summary>
            <remarks>
            The FileSystemWatcher requires the system to have aygshell.dll. Also, this class is not thread-safe. 
            </remarks>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.#ctor">
            <summary>
            Initializes a new instance of the <b>FileSystemWatcher</b> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemWatcher</b> class, given the specified directory to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemWatcher</b> class, given the specified directory and type of files to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Created">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is created.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Changed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is changed.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Deleted">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is deleted.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Renamed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is renamed.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.EnableRaisingEvents">
            <summary>
            Gets or sets a value indicating whether the component is enabled.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.IncludeSubdirectories">
            <summary>
            Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.NotifyFilter">
            <summary>
            Gets or sets the type of changes to watch for.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.Path">
            <summary>
            Gets or sets the path of the directory to watch.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.Filter">
            <summary>
            Gets or sets the filter string, used to determine what files are monitored in a directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileCreateDisposition">
            <summary>
            Specifies which action to take on files that exist, and which action to take when files do not exist.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.CreateNew">
            <summary>
            Creates a new file.
            The function fails if the specified file already exists.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.CreateAlways">
            <summary>
            Creates a new file.
            If the file exists, the function overwrites the file and clears the existing attributes.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.OpenExisting">
            <summary>
            Opens the file.
            The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.OpenAlways">
            <summary>
            Opens the file, if it exists.
            If the file does not exist, the function creates the file as if dwCreationDisposition were <b>CreateNew</b>.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.TruncateExisting">
            <summary>
            Opens the file.
            Once opened, the file is truncated so that its size is zero bytes. The calling process must open the file with at least Write access.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String)">
            <summary>
            Creates a DelimitedTextFileWriter with a comma (',') FieldDelimiter and a newline ('\n') RowDelimiter
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.NextRow">
            <summary>
            Writes a RowDelimiter to the output file
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.Char)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and a newline ('\n') RowDelimiter
            </summary>
            <param name="fieldDelimiter">char that separates fields in a row</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.String)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and a newline ('\n') RowDelimiter
            </summary>
            <param name="fieldDelimiter">string that separates fields in a row</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.Char,System.Char)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and RowDelimiter
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="fieldDelimiter">char that separates fields in a row</param>
            <param name="RowDelimiter">char that separates rows in the file</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and RowDelimiter
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="fieldDelimiter">char that separates fields in a row</param>
            <param name="RowDelimiter">char that separates rows in the file</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.String,System.String)">
            <summary>
            Creates a DelimitedTextFileWriter with the provided FieldDelimiter and RowDelimiter
            </summary>
            <param name="fieldDelimiter">string that separates fields in a row</param>
            <param name="RowDelimiter">string that separates rows in the file</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="path">The complete file path to write to.</param>
            <param name="append">
            Determines whether data is to be appended to the file. If the file exists
            and append is false, the file is overwritten. If the file exists and append
            is true, the data is appended to the file. Otherwise, a new file is created.
            </param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Write(System.Object[])">
            <summary>
            Writes an array of values to a single row in the target file
            </summary>
            <param name="values">values to write</param>
            <summary>
            Writes an array of values to a single row in the target file
            </summary>
            <param name="values">values to write</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Write(System.String[])">
            <summary>
            Writes an array of values to a single row in the target file
            </summary>
            <param name="values">values to write</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Write(System.Collections.IEnumerable)">
            <summary>
            Writes any IEnumerable list to a single row in the target file.  
            If each element in the list is also IEnumerable then each element becomes a row in the target file
            </summary>
            <param name="valueList"></param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Write(System.String)">
            <summary>
            Writes the value followed by the currently set FieldDelimiter to the output file
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Close">
            <summary>
            Closes the current writer and releases any system resources associated with
             the writer.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.DelimitedTextWriter.Flush">
            <summary>
            Causes any buffered data to be flushed to the target file
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenNETCF.IO.DelimitedTextWriter.Dispose" -->
        <member name="P:OpenNETCF.IO.DelimitedTextWriter.FieldDelimiter">
            <summary>
            Gets or sets the string that separates fields in a row
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DelimitedTextWriter.RowDelimiter">
            <summary>
            Gets or sets the string that separates rows in the file
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.AddressType">
            <summary>
            Identifies the phone number type specified in the <see cref="T:OpenNETCF.Phone.Sms.SmsAddress"/> structure.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.AddressType.Unknown">
            <summary>
            Unknown phone number type.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.AddressType.International">
            <summary>
            Number is expressed in full with country code.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.AddressType.National">
            <summary>
            Number is expressed without country code.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.AddressType.NetworkSpecific">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.AddressType.Subscriber">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.AddressType.Alphanumeric">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.AddressType.Abbreviated">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.NotificationStatus">
            <summary>
            The status of the notification.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationStatus.Inactive">
            <summary>
            The notification is not currently active.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationStatus.Signalled">
            <summary>
            The notification is currently active.
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.NotificationAction">
            <summary>
            Specifies the action to take when a notification event occurs.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationAction.Led">
            <summary>
            Flashes the LED.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationAction.Vibrate">
            <summary>
            Vibrates the device.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationAction.Dialog">
            <summary>
            Displays the user notification dialog box.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationAction.Sound">
            <summary>
            Plays the sound specified.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationAction.Repeat">
            <summary>
            Repeats the sound for 10–15 seconds.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationAction.Private">
            <summary>
            Dialog box z-order flag.
            Set if the notification dialog box should come up behind the password.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.DriveInfo">
            <summary>
            Provides access to information on a drive.
            </summary>
            <remarks>This class models a drive and provides methods and properties to query for drive information.
            Use <see cref="T:OpenNETCF.IO.DriveInfo"/> to determine what drives are available, and the capacity and available free space on the drive.</remarks>
        </member>
        <member name="M:OpenNETCF.IO.DriveInfo.#ctor(System.String)">
            <summary>
            Provides access to information on the specified drive.
            </summary>
            <param name="driveName"></param>
            <remarks>Use this class to obtain information on drives.
            The drive name must be a valid Windows CE volume path e.g. "\Storage Card".
            You cannot use this method to obtain information on drive names that are a null reference (Nothing in Visual Basic) or use UNC (\\server\share) paths.</remarks>
            <exception cref="T:System.ArgumentNullException">The drive name cannot be a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:OpenNETCF.IO.DriveInfo.ToString">
            <summary>
            Returns a drive name as a string.
            </summary>
            <returns>The name of the drive.</returns>
        </member>
        <member name="M:OpenNETCF.IO.DriveInfo.GetDrives">
            <summary>
            Retrieves the drive names of all logical drives on a computer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.RootDirectory">
            <summary>
            Gets the root directory of a drive.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.AvailableFreeSpace">
            <summary>
            Indicates the amount of available free space on a drive.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.TotalFreeSpace">
            <summary>
            Gets the total amount of free space available on a drive.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.DriveInfo.TotalSize">
            <summary>
            Gets the total size of storage space on a drive.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect">
            <summary>
            Makes an exclusive, asynchronous connection with Connection Manager using the system default destination. 
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect(System.Boolean)">
            <summary>
            Makes an asynchronous connection with Connection Manager using the system default destination.
            </summary>
            <param name="exclusive">True creates an exclusive connection; false creates a non-exclusive connection.</param>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect(OpenNETCF.Net.ConnectionMode)">
            <summary>
            Makes an exclusive connection with Connection Manager using the system default destination.
            </summary>
            <param name="mode">States how the connection is to be made: either Synchronous or Asynchronous</param>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect(System.Boolean,OpenNETCF.Net.ConnectionMode)">
            <summary>
            Makes a connection with Connection Manager using the system default destination.
            </summary>
            <param name="exclusive">True creates an exclusive connection; false creates a non-exclusive connection.</param>
            <param name="mode">States how the connection is to be made: either Synchronous or Asynchronous</param>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.Connect(System.Guid,System.Boolean,OpenNETCF.Net.ConnectionMode)">
            <summary>
            Makes a connection with Connection Manager using the specified destination.
            </summary>
            <param name="destGuid">The destination to connect to.</param>
            <param name="exclusive">Determines whether the connection should be exclusive or not.</param>
            <param name="mode">Determines how the connection is to be made: either Synchronous or Asynchronous</param>
        </member>
        <member name="M:OpenNETCF.Net.ConnectionManager.RequestDisconnect">
            <summary>
            Disconnect the connection whose handle is hConnection.
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.ConnectionDetailItemsChanged">
            <summary>
            Occurs when the connection detail item list changes
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.Connected">
            <summary>
            Occurs when a connection is opened.
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.Disconnected">
            <summary>
            Occurs when a connection is closed.
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.ConnectionStateChanged">
            <summary>
            Occurs when the connection state is changed.
            </summary>
        </member>
        <member name="E:OpenNETCF.Net.ConnectionManager.ConnectionFailed">
            <summary>
            Occurs when a connection fails.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionManager.Status">
            <summary>
            Describes the current state of the connection
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.ConnectionManager.Timeout">
            <summary>
            Specifies the timeout for a synchronous connection attempt
            </summary>
        </member>
        <member name="M:OpenNETCF.NativeMethods.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            This function returns the address of the specified exported DLL function.
            </summary>
            <param name="hModule">Handle to the DLL module that contains the function.
            The <see cref="M:OpenNETCF.NativeMethods.LoadLibrary(System.String)"/> or <see cref="M:OpenNETCF.NativeMethods.GetModuleHandle(System.String)"/> function returns this handle.</param>
            <param name="procName">string containing the function name, or specifies the function's ordinal value.
            If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero.</param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.NativeMethods.GetModuleHandle(System.String)">
            <summary>
            This function returns a module handle for the specified module if the file is mapped into the address space of the calling process.
            </summary>
            <param name="moduleName">string that contains the name of the module, which must be a DLL file.</param>
            <returns>A handle to the specified module indicates success. IntPtr.Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.NativeMethods.IsBadCodePtr(System.IntPtr)">
            <summary>
            This function determines whether the calling process has read access to the memory at the specified address.
            </summary>
            <param name="fn">Pointer to an address in memory.</param>
            <returns>Zero indicates that the calling process has read access to the specified memory.
            Nonzero indicates that the calling process does not have read access to the specified memory.</returns>
        </member>
        <member name="T:OpenNETCF.NativeMethods.ProcessorArchitecture">
            <summary>
            Processor Architecture values (GetSystemInfo)
            </summary>
            <seealso cref="M:OpenNETCF.WinAPI.Core.GetSystemInfo(OpenNETCF.WinAPI.Core.SYSTEM_INFO)"/>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.Intel">
            <summary>
            Processor is Intel x86 based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.MIPS">
            <summary>
            Processor is MIPS based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.Alpha">
            <summary>
            Processor is Alpha based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.PPC">
            <summary>
            Processor is Power PC based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.SHX">
            <summary>
            Processor is SH3, SH4 etc.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.ARM">
            <summary>
            Processor is ARM based.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.IA64">
            <summary>
            Processor is Intel 64bit.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.Alpha64">
            <summary>
            Processor is Alpha 64bit.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorArchitecture.Unknown">
            <summary>
            Unknown processor architecture.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.ProcessorType">
            <summary>
            Processor type values (GetSystemInfo)
            </summary>
            <seealso cref="M:OpenNETCF.Win32.Core.GetSystemInfo(OpenNETCF.Win32.Core.SYSTEM_INFO)"/>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_386">
            <summary>
            Processor is Intel 80386.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_486">
            <summary>
            Processor is Intel 80486.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_Pentium">
            <summary>
            Processor is Intel Pentium (80586).
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_PentiumII">
            <summary>
            Processor is Intel Pentium II (80686).
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Intel_IA64">
            <summary>
            Processor is Intel 64bit (IA64).
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.MIPS_R4000">
            <summary>
            Processor is MIPS R4000.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Alpha_21064">
            <summary>
            Processor is Alpha 21064.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_403">
            <summary>
            Processor is Power PC 403.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_601">
            <summary>
            Processor is Power PC 601.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_603">
            <summary>
            Processor is Power PC 603.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_604">
            <summary>
            Processor is Power PC 604.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.PPC_620">
            <summary>
            Processor is Power PC 620.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Hitachi_SH3">
            <summary>
            Processor is Hitachi SH3.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Hitachi_SH3E">
            <summary>
            Processor is Hitachi SH3E.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Hitachi_SH4">
            <summary>
            Processor is Hitachi SH4.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.Motorola_821">
            <summary>
            Processor is Motorola 821.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.SHx_SH3">
            <summary>
            Processor is SH3.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.SHx_SH4">
            <summary>
            Processor is SH4.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.StrongARM">
            <summary>
            Processor is StrongARM.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.ARM720">
            <summary>
            Processor is ARM 720.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.ARM820">
            <summary>
            Processor is ARM 820.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.ARM920">
            <summary>
            Processor is ARM 920.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.ProcessorType.ARM_7TDMI">
            <summary>
            Processor is ARM 7 TDMI.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.SystemInfo">
            <summary>
            This structure contains information about the current computer system. This includes the processor type, page size, memory addresses, and OEM identifier.
            </summary>
            <seealso cref="M:OpenNETCF.NativeMethods.GetSystemInfo(OpenNETCF.NativeMethods.SystemInfo@)"/>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ProcessorArchitecture">
            <summary>
            The system's processor architecture.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.PageSize">
            <summary>
            The page size and the granularity of page protection and commitment.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.MinimumApplicationAddress">
            <summary>
            Pointer to the lowest memory address accessible to applications and dynamic-link libraries (DLLs). 
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.MaximumApplicationAddress">
            <summary>
            Pointer to the highest memory address accessible to applications and DLLs.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ActiveProcessorMask">
            <summary>
            Specifies a mask representing the set of processors configured into the system. Bit 0 is processor 0; bit 31 is processor 31. 
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.NumberOfProcessors">
            <summary>
            Specifies the number of processors in the system.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ProcessorType">
            <summary>
            Specifies the type of processor in the system.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.AllocationGranularity">
            <summary>
            Specifies the granularity with which virtual memory is allocated.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ProcessorLevel">
            <summary>
            Specifies the system’s architecture-dependent processor level.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.SystemInfo.ProcessorRevision">
            <summary>
            Specifies an architecture-dependent processor revision.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.MemoryStatus">
            <summary>
            This structure contains information about current memory availability. The GlobalMemoryStatus function uses this structure.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.MemoryLoad">
            <summary>
            Specifies a number between 0 and 100 that gives a general idea of current memory utilization, in which 0 indicates no memory use and 100 indicates full memory use.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.TotalPhysical">
            <summary>
            Indicates the total number of bytes of physical memory.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.AvailablePhysical">
            <summary>
            Indicates the number of bytes of physical memory available.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.TotalPageFile">
            <summary>
            Indicates the total number of bytes that can be stored in the paging file. Note that this number does not represent the actual physical size of the paging file on disk.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.AvailablePageFile">
            <summary>
            Indicates the number of bytes available in the paging file.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.TotalVirtual">
            <summary>
            Indicates the total number of bytes that can be described in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.MemoryStatus.AvailableVirtual">
            <summary>
            Indicates the number of bytes of unreserved and uncommitted memory in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.FormatMessageFlags">
            <summary>
            Specifies aspects of the formatting process and how to interpret the lpSource parameter.
            </summary>
            <remarks>The low-order byte of dwFlags specifies how the function handles line breaks in the output buffer.
            The low-order byte can also specify the maximum width of a formatted output line.</remarks>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.AllocateBuffer">
            <summary>
            The function allocates a buffer large enough to hold the formatted message, and places a pointer to the allocated buffer at the address specified by lpBuffer.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.IgnoreInserts">
            <summary>
            Insert sequences in the message definition are to be ignored and passed through to the output buffer unchanged.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.FromString">
            <summary>
            Specifies that lpSource is a pointer to a null-terminated message definition.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.FromHModule">
            <summary>
            Specifies that lpSource is a module handle containing the message-table resource(s) to search.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.FromSystem">
            <summary>
            Specifies that the function should search the system message-table resource(s) for the requested message.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.ArgumentArray">
            <summary>
            Specifies that the Arguments parameter is not a va_list structure, but instead is just a pointer to an array of 32-bit values that represent the arguments.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.FormatMessageFlags.MaxWidthMask">
            <summary>
            Use the <b>MaxWidthMask</b> constant and bitwise Boolean operations to set and retrieve this maximum width value.
            </summary>
        </member>
        <member name="T:OpenNETCF.NativeMethods.KeyStateFlags">
            <summary>
            KeyStateFlags for Keyboard methods
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Toggled">
            <summary>
            Key is toggled.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.AsyncDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.PrevDown">
            <summary>
            Key was previously down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Down">
            <summary>
            Key is currently down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.AnyCtrl">
            <summary>
            Left or right CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.AnyShift">
            <summary>
            Left or right SHIFT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.AnyAlt">
            <summary>
            Left or right ALT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Capital">
            <summary>
            VK_CAPITAL is toggled.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.LeftCtrl">
            <summary>
            Left CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.LeftShift">
            <summary>
            Left SHIFT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.LeftAlt">
            <summary>
            Left ALT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.LeftWin">
            <summary>
            Left Windows logo key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.RightCtrl">
            <summary>
            Right CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.RightShift">
            <summary>
            Right SHIFT key is down
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.RightAlt">
            <summary>
            Right ALT key is down
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.RightWin">
            <summary>
            Right Windows logo key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Dead">
            <summary>
            Corresponding character is dead character.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.NoCharacter">
            <summary>
            No characters in pCharacterBuffer to translate.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.Language1">
            <summary>
            Use for language specific shifts.
            </summary>
        </member>
        <member name="F:OpenNETCF.NativeMethods.KeyStateFlags.NumLock">
            <summary>
            NumLock toggled state.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.SmsAddress">
            <summary>
            SMS Addressing information.
            </summary>
            <remarks>Equivalent to native <b>sms_address_tag</b> structure</remarks>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.SmsAddress.Length">
            <summary>
            Length, in Bytes,  of SmsAddress structure.
            </summary>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.SmsAddress.#ctor">
            <summary>
            Create a new instance of SmsAddress.
            </summary>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.SmsAddress.#ctor(System.Byte[])">
            <summary>
            Create a new instance of SmsAddress from a Byte array.
            </summary>
            <param name="data">SmsAddress data in a Byte array.</param>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.SmsAddress.#ctor(System.String)">
            <summary>
            Create a new instance of SmsAddress with a specified address.
            </summary>
            <param name="address">Address e.g. +447890123456</param>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.SmsAddress.#ctor(System.String,OpenNETCF.Phone.AddressType)">
            <summary>
            Create a new instance of SmsAddress with a specified address and type.
            </summary>
            <param name="address">Address e.g. +447890123456</param>
            <param name="type">A member of the SmsAddressType Enumeration</param>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.SmsAddress.ToByteArray">
            <summary>
            Returns a flat Byte Array of the Sms Address data
            </summary>
            <returns>Byte array containing SmsAddress data.</returns>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.SmsAddress.op_Implicit(OpenNETCF.Phone.Sms.SmsAddress)~System.Byte[]">
            <summary>
            Cast SmsAddress object to a byte array
            </summary>
            <param name="sa">SmsAddress object</param>
            <returns>Byte array containing SmsAddress data.</returns>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.SmsAddress.op_Implicit(System.Byte[])~OpenNETCF.Phone.Sms.SmsAddress">
            <summary>
            Cast byte array to SmsAddress object.
            </summary>
            <param name="b">Byte array containing SmsAddress data</param>
            <returns>SmsAddress version of the data.</returns>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.SmsAddress.Type">
            <summary>
            The address type.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.SmsAddress.Address">
            <summary>
            The address in string format. For example, "127.0.0.1" or "+1.800.123.4567".
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.DeviceManagement">
            <summary>
            This class provides access to common device management functionality
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.DeviceManagement.PlatformName">
            <summary>
            Returns a string which identifies the device platform.
            </summary>
            <remarks>Valid values include:-
            <list type="bullet">
            <item><term>PocketPC</term><description>Pocket PC device or Emulator</description></item>
            <item><term>SmartPhone</term><description>Smartphone 2003 Device or Emulator</description></item>
            <item><term>CEPC platform</term><description>Windows CE.NET Emulator</description></item></list>
            Additional platform types will have other names.
            Useful when writing library code targetted at multiple platforms.</remarks>
        </member>
        <member name="P:OpenNETCF.WindowsCE.DeviceManagement.OemInfo">
            <summary>
            Returns OEM specific information from the device. This may include Model number
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SafeHandles.SafeWaitHandle">
            <summary>
            Represents a wrapper class for wait handles.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
            <summary>
            Provides common functionality that supports safe Win32 handle types.
            </summary>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.SafeHandle">
            <summary>
            Represents a wrapper class for operating system handles.
            </summary>
        </member>
        <member name="F:OpenNETCF.Runtime.InteropServices.SafeHandle.handle">
            <summary>
            Specifies the handle to be wrapped.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the SafeHandle class with the specified invalid handle value.
            </summary>
            <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).</param>
            <param name="ownsHandle">true to reliably let SafeHandle release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.Close">
            <summary>
            Marks the handle for releasing and freeing resources.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
            <summary>
            Returns the value of the <see cref="F:OpenNETCF.Runtime.InteropServices.SafeHandle.handle"/> field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
            <summary>
            Sets the handle to the specified pre-existing handle.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
            <summary>
            Marks a handle as invalid.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.Dispose">
            <summary>
            Marks the handle for releasing and freeing resources.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.SafeHandle.Finalize">
            <summary>
            Frees all resources associated with the handle.
            </summary>
        </member>
        <member name="P:OpenNETCF.Runtime.InteropServices.SafeHandle.IsClosed">
            <summary>
            Gets a value indicating whether the handle is closed.
            </summary>
            <value>true if the handle is closed; otherwise, false.</value>
        </member>
        <member name="P:OpenNETCF.Runtime.InteropServices.SafeHandle.IsInvalid">
            <summary>
            When overridden in a derived class, gets a value indicating whether the handle value is invalid.
            </summary>
            <value>true if the handle is valid; otherwise, false.</value>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"/> class.
            </summary>
            <param name="ownsHandle">true to reliably release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="P:OpenNETCF.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
            <summary>
            Gets a value indicating whether a handle is invalid.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Win32.SafeHandles.SafeWaitHandle"/> class.
            </summary>
            <param name="existingHandle">The pre-existing handle to use.</param>
            <param name="ownsHandle">true to reliably release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle">
            <summary>
            Executes the code required to free a handle.
            </summary>
            <returns>true if the handle is released successfully; false if a catastrophic failure occurs.</returns>
        </member>
        <member name="T:OpenNETCF.Threading.NativeMethods">
            <summary>
            Contains native API calls for Threading related functionality.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.SmsMessage">
            <summary>
            Represents an individual SMS message.
            </summary>
            <preliminary/>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.NotificationType">
            <summary>
            Specifies the type of notification.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationType.Event">
            <summary>
            System event notification.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationType.Time">
            <summary>
            Time-based notification.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationType.Period">
            <summary>
            Time-based notification that is active for the time period between <see cref="M:OpenNETCF.Win32.Notify.NotificationTrigger.StartTime"/> and <see cref="M:OpenNETCF.Win32.Notify.NotificationTrigger.EndTime"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationType.ClassicTime">
            <summary>
            Equivalent to using the SetUserNotification function.
            The standard command line is supplied.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileSystem.FileSystemMonitor">
            <summary>
            Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.
            </summary>
            <remarks>
            The FileSystemMonitor is thread-safe and does not depend on aygshell.dll being present in the system, 
            therefore, it is safe to use this for file system notifications when no GUI is present. 
            </remarks>
        </member>
        <member name="M:OpenNETCF.IO.FileSystem.FileSystemMonitor.#ctor">
            <summary>
            Initializes a new instance of the <b>FileSystemMonitor</b> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystem.FileSystemMonitor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemMonitor</b> class, given the specified directory to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystem.FileSystemMonitor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemMonitor</b> class, given the specified directory and type of files to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystem.FileSystemMonitor.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:OpenNETCF.IO.FileSystem.FileSystemMonitor"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystem.FileSystemMonitor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:OpenNETCF.IO.FileSystem.FileSystemMonitor"/> and optionally releases the managed resources.
            </summary>
            <param name="finalizing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="E:OpenNETCF.IO.FileSystem.FileSystemMonitor.Created">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystem.FileSystemMonitor.Path"/> is created.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystem.FileSystemMonitor.Changed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystem.FileSystemMonitor.Path"/> is changed.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystem.FileSystemMonitor.Deleted">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is deleted.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystem.FileSystemMonitor.Renamed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystem.FileSystemMonitor.Path"/> is renamed.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystem.FileSystemMonitor.EnableRaisingEvents">
            <summary>
            Gets or sets a value indicating whether the component is enabled.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystem.FileSystemMonitor.IncludeSubdirectories">
            <summary>
            Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystem.FileSystemMonitor.NotifyFilter">
            <summary>
            Gets or sets the type of changes to watch for.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystem.FileSystemMonitor.Path">
            <summary>
            Gets or sets the path of the directory to watch.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystem.FileSystemMonitor.Filter">
            <summary>
            Gets or sets the filter string, used to determine what files are monitored in a directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.LargeIntervalTimer">
            <summary>
            This class encapsulates a low resolution Timer that is designed to be fired on large intervals (from seconds to even days).
            <remarks>Unlike the Forms or Threading Timers, if the device is asleep when the Tick occurs, the device will wake and the Tick handler will run.</remarks>
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.LargeIntervalTimer.Enabled">
            <summary>
            Gets or sets whether the Timer is currently running
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.LargeIntervalTimer.Interval">
            <summary>
            Gets or sets the TimeSpan interval between ticks.
            <remarks>Note that the resolution of the underlying notification timer used is not conducive to millisecond accuracy so any sub-second portion of the Interval is ignored.</remarks>
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.LargeIntervalTimer.OneShot">
            <summary>
            If set, the Timer will automatically disable itself after each Tick event is raised
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.LargeIntervalTimer.FirstEventTime">
            <summary>
            Sets or get the absolute time for the first Tick event.  This is useful when setting up a periodic tick starting at a fixed time
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileAccess2">
            <summary>
            CreateFile file access flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess2.Read">
            <summary>
            Read access to the file.  Data can be read from the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess2.Write">
            <summary>
            Write access to the file.  Data can be written to the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess2.Execute">
            <summary>
            Execute permission. The file can be executed.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess2.All">
            <summary>
            All permissions.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.MessageProtocol">
            <summary>
            SMS Protocol Identifier (PID) constants.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SafeHandles.SafeFileHandle">
            <summary>
            Represents a wrapper class for file handles.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Win32.SafeHandles.SafeFileHandle"/> class.
            </summary>
            <param name="preexistingHandle">The pre-existing handle to use.</param>
            <param name="ownsHandle">true to reliably release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeFileHandle.ReleaseHandle">
            <summary>
            Executes the code required to free a handle.
            </summary>
            <returns>true if the handle is released successfully; false if a catastrophic failure occurs.</returns>
        </member>
        <member name="T:OpenNETCF.Threading.EventWaitHandle">
            <summary>
            Represents a thread synchronization event.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Set(System.Int32)">
            <summary>
            Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
            </summary>
            <param name="data">Data that can be read by the event recipient</param>
            <returns>true if the function succeeds; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Pulse">
            <summary>
            Provides a single operation that sets to signaled the state of the specified event object and then resets it to nonsignaled after releasing the appropriate number of waiting threads.
            </summary>
            <remarks>
            For a manual-reset event object, all waiting threads that can be released immediately are released. The function then resets the event object's state to nonsignaled and returns. 
            For an auto-reset event object, the function resets the state to nonsignaled and returns after releasing a single waiting thread, even if multiple threads are waiting. 
            If no threads are waiting, or if no thread can be released immediately, PulseEvent simply sets the event object's state to nonsignaled and returns. 
            For a thread using the multiple-object wait functions to wait for all specified objects to be signaled, PulseEvent can set the event object's state to signaled and reset it to nonsignaled without causing the wait function to return. This happens if not all of the specified objects are simultaneously signaled. 
            </remarks>
            <returns>true on success, otherwise false</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.GetData">
            <summary>
            Gets the data associated (provided with a call to Set) with this event.
            </summary>
            <returns>The associated data</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.OpenExisting(System.String)">
            <summary>
            Opens an existing named synchronization event.
            </summary>
            <param name="name">The name of a system event.</param>
            <returns>A <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> object that represents the named system event.</returns>
            <exception cref="T:System.ArgumentException">name is a zero-length string.
            -or-
            name is longer than 260 characters.</exception>
            <exception cref="T:System.ArgumentNullException">name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException">The named system event does not exist.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Reset">
            <summary>
            Sets the state of the event to nonsignaled, causing threads to block.
            </summary>
            <returns>true if the function succeeds; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Set">
            <summary>
            Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
            </summary>
            <returns>true if the function succeeds; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.#ctor(System.Boolean,OpenNETCF.Threading.EventResetMode)">
            <summary>
            Initializes a newly created <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> object, specifying whether the wait 
            handle is initially signaled, and whether it resets automatically or manually.
            </summary>
            <param name="initialState">true to set the initial state to signaled, false to set it to nonsignaled.</param>
            <param name="mode">An EventResetMode value that determines whether the event resets automatically or manually.</param>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.#ctor(System.Boolean,OpenNETCF.Threading.EventResetMode,System.String)">
            <summary>
            Initializes a newly created <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> object, specifying whether the wait handle is initially signaled, whether it resets automatically or manually, and the name of a system synchronization event.
            </summary>
            <param name="initialState">true to set the initial state to signaled, false to set it to nonsignaled.</param>
            <param name="mode">An Threading.EventResetMode value that determines whether the event resets automatically or manually.</param>
            <param name="name">The name of a system-wide synchronization event.</param>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.#ctor(System.Boolean,OpenNETCF.Threading.EventResetMode,System.String,System.Boolean@)">
            <summary>
            Initializes a newly created <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> object, specifying whether the wait handle is initially signaled, whether it resets automatically or manually, the name of a system synchronization event, and a bool variable whose value after the call indicates whether the named system event was created.
            </summary>
            <param name="initialState">true to set the initial state to signaled, false to set it to nonsignaled.</param>
            <param name="mode">An Threading.EventResetMode value that determines whether the event resets automatically or manually.</param>
            <param name="name">The name of a system-wide synchronization event.</param>
            <param name="createdNew">When this method returns, contains true if the calling thread was granted initial ownership of the named system event; otherwise, false. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitOne">
            <summary>
            When overridden in a derived class, blocks the current thread until the current <see cref="T:System.Threading.WaitHandle"/> receives a signal.
            </summary>
            <returns>true if the current instance receives a signal. if the current instance is never signaled, <see cref="M:OpenNETCF.Threading.EventWaitHandle.WaitOne(System.Int32,System.Boolean)"/> never returns.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitOne(System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current <see cref="T:System.Threading.WaitHandle"/> receives a signal, using 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Threading.Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">Not Supported - Just pass false.</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitAny(System.Threading.WaitHandle[])">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <returns>The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to timeout has passed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely</param>
            <param name="exitContext">Unsupported in the Compact Framework.  This parameter is for compatibility and is ignored.</param>
            <returns>The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to timeout has passed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitAny(System.IntPtr[])">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <returns>The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to timeout has passed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitAny(System.IntPtr[],System.Int32,System.Boolean)">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely</param>
            <param name="exitContext">Unsupported in the Compact Framework.  This parameter is for compatibility and is ignored.</param>
            <returns>The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to timeout has passed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan"/> to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="timeout">A TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="exitContext">Not Supported - Just pass false.</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Close">
            <summary>
            When overridden in a derived class, releases all resources held by the current <see cref="T:System.Threading.WaitHandle"/>.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.EventWaitHandle.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="explicitDisposing"></param>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.UserNotificationInfoHeader">
            <summary>
            Contains information about notification events.
            </summary>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.UserNotificationInfoHeader.#ctor">
            <summary>
            Create a new instance of UserNotificationInfoHeader
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationInfoHeader.Handle">
            <summary>
            Handle to the notification.
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationInfoHeader.Status">
            <summary>
            Indicates current state of the notification.
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationInfoHeader.UserNotificationTrigger">
            <summary>
            The <see cref="P:OpenNETCF.WindowsCE.Notification.UserNotificationInfoHeader.UserNotificationTrigger"/> object
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationInfoHeader.UserNotification">
            <summary>
            The <see cref="P:OpenNETCF.WindowsCE.Notification.UserNotificationInfoHeader.UserNotification"/> object.
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.NotificationEvent">
            <summary>
            Available notification events
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.None">
            <summary>   
            No events—remove all event registrations for this application.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.TimeChange">
            <summary>   
            When the system time is changed.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.SyncEnd">
            <summary>   
            When data synchronization finishes.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.OnACPower">
            <summary>
            The user turned the AC power on.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.OffACPower">
            <summary>
            The user turned the alternating current (AC) power off.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.NetConnect">
            <summary>
            The device connected to a network.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.NetDisconnect">
            <summary>
            The device disconnected from a network.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.DeviceChange">
            <summary>   
            When a PC Card device is changed.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.IRDiscovered">
            <summary>
            The device discovered a server by using infrared communications.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.RS232Detected">
            <summary>   
            When an RS232 connection is made.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.RestoreEnd">
            <summary>   
            When a full device data restore completes.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.Wakeup">
            <summary>   
            When the device wakes up.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.TimeZoneChange">
            <summary>   
            When the time zone is changed.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.MachineNameChange">
            <summary>
            When the machines name changes.
            Requires Windows CE.NET 4.2.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.RndisFNDetected">
            <summary>
            RNDISFN interface is instantiated.
            Requires Windows CE 5.0.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NotificationEvent.InternetProxyChange">
            <summary>
            The Internet Proxy used by the device has changed.
            Requires Windows CE 5.0.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
            <summary>
            Provides common functionality that supports safe Win32 handle types.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Win32.SafeHandles.SafeHandleMinusOneIsInvalid"/> class.
            </summary>
            <param name="ownsHandle">true to reliably release the handle during the finalization phase; otherwise, false (not recommended).</param>
        </member>
        <member name="P:OpenNETCF.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
            <summary>
            Gets a value indicating whether a handle is invalid.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.NamedMutex">
            <summary>
            A synchronization primitive than can also be used for interprocess synchronization.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.#ctor(System.Boolean,System.String,System.Boolean@)">
            <summary>
            Initializes a new instance of the Mutex2 class with a Boolean value indicating whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, will indicate whether the calling thread was granted initial ownership of the mutex.
            </summary>
            <param name="initiallyOwned">true to give the calling thread initial ownership of the mutex; otherwise, false.</param>
            <param name="name">The name of the Mutex.
            If the value is a null reference (Nothing in Visual Basic), the Mutex is unnamed.</param>
            <param name="createdNew">When this method returns, contains a Boolean that is true if the calling thread was granted initial ownership of the mutex; otherwise, false.
            This parameter is passed uninitialized.</param>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the Mutex2 class with a Boolean value indicating whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.
            </summary>
            <param name="initiallyOwned">true to give the calling thread initial ownership of the mutex; otherwise, false.</param>
            <param name="name">The name of the Mutex.
            If the value is a null reference (Nothing in Visual Basic), the Mutex is unnamed.</param>
            <exception cref="T:System.ApplicationException">Failed to create mutex.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.NamedMutex"/> class with a Boolean value indicating whether the calling thread should have initial ownership of the mutex.
            </summary>
            <param name="initiallyOwned">true to give the calling thread initial ownership of the mutex; otherwise, false.</param>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.#ctor">
            <summary>
            Initializes a new instance of the Mutex2 class with default properties.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.OpenExisting(System.String)">
            <summary>
            Opens an existing named mutex.
            </summary>
            <param name="name">The name of a system-wide named mutex object.</param>
            <returns>A <see cref="T:OpenNETCF.Threading.NamedMutex"/> object that represents a named system mutex.</returns>
            <remarks>The OpenExisting method attempts to open an existing named mutex.
            If the system mutex does not exist, this method throws an exception instead of creating the system object.
            Two calls to this method with the same value for name do not necessarily return the same <see cref="T:OpenNETCF.Threading.NamedMutex"/> object, even though they represent the same named system mutex.</remarks>
            <exception cref="T:System.ArgumentException">name is a zero-length string.
            -or-
            name is longer than 260 characters.</exception>
            <exception cref="T:System.ArgumentNullException">name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException">The named mutex does not exist.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.ReleaseMutex">
            <summary>
            Releases the <see cref="T:OpenNETCF.Threading.NamedMutex"/> once.
            </summary>
            <exception cref="T:System.ApplicationException">The calling thread does not own the mutex.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.WaitOne">
            <summary>
            Blocks the current thread until the current <see cref="T:OpenNETCF.Threading.NamedMutex"/> receives a signal.
            </summary>
            <returns>true if the current instance receives a signal. if the current instance is never signaled, <see cref="M:OpenNETCF.Threading.NamedMutex.WaitOne"/> never returns.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.WaitOne(System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current <see cref="T:OpenNETCF.Threading.NamedMutex"/> receives a signal, using 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Threading.Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current instance receives a signal, using a TimeSpan to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="aTs">A TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.Close">
            <summary>
            Releases all resources held by the current <see cref="T:System.Threading.WaitHandle"/>
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.NamedMutex.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="explicitDisposing"></param>
        </member>
        <member name="T:OpenNETCF.Threading.EventResetMode">
            <summary>
            Indicates whether an <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> is reset automatically or manually.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.EventResetMode.AutoReset">
            <summary>
            When signaled, the <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> resets automatically after releasing a single thread.
            If no threads are waiting, the EventWaitHandle remains signaled until a thread blocks, and resets after releasing the thread.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.EventResetMode.ManualReset">
            <summary>
            When signaled, the <see cref="T:OpenNETCF.Threading.EventWaitHandle"/> releases all waiting threads, and remains signaled until it is manually reset.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.NotificationProviderSpecificData">
            <summary>
            Summary description for NotificationProviderSpecificData.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.ProviderSpecificData">
            <summary>
            Summary description for ProviderSpecificData.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.NotificationProviderSpecificData.MessageClass">
            <summary>
            Sets the message class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.NotificationProviderSpecificData.ReplaceOption">
            <summary>
            Text SMS messages with the appropriate flag can replace previously received notifications with a similar flag and originating address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.NotificationProviderSpecificData.WaitingType">
            <summary>
            The type of the notification message.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.NotificationProviderSpecificData.NumberOfMessagesWaiting">
            <summary>
            The number of waiting messages.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.NotificationProviderSpecificData.IndicatorType">
            <summary>
            The cellular line that a notification is for.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.ConnectionPriority">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.Voice">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.UserInteractive">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.UserBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.UserIdle">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.HighPriorityBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.IdleBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.ExternalInteractive">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.LowBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionPriority.Cached">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.ConnectionStatus">
            <summary>
            Describes the current status of the connection
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.Unknown">
            <summary>
            Unknown status
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.Connected">
            <summary>
            Connection is up
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.Disconnected">
            <summary>
            Connection is disconnected
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.ConnectionFailed">
            <summary>
            Connection failed and cannot not be re-established
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.ConnectionCancelled">
            <summary>
            User aborted connection
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.ConnectionDisabled">
            <summary>
            Connection is ready to connect but disabled
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.NoPathToDestination">
            <summary>
            No path could be found to destination
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingForPath">
            <summary>
            Waiting for a path to the destination
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingForPhone">
            <summary>
            Voice call is in progress
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingConnection">
            <summary>
            Attempting to connect
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingForResource">
            <summary>
            Resource is in use by another connection
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingForNetwork">
            <summary>
            No path could be found to destination
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingDisconnection">
            <summary>
            Connection is being brought down
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionStatus.WaitingConnectionAbort">
            <summary>
            Aborting connection attempt
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.ConnectionMode">
            <summary>
            The type of connection to establish
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionMode.Synchronous">
            <summary>
            Connect synchronously
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.ConnectionMode.Asynchronous">
            <summary>
            Connect asynchronously
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SystemTime">
            <summary>   
            This structure represents a date and time using individual members for the month, day, year, weekday, hour, minute, second, and millisecond.   
            </summary>
            <remarks>Wraps the native <b>SYSTEMTIME</b> structure.</remarks>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wYearOffset">
            <summary>
            Offset within structure to Year value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wMonthOffset">
            <summary>
            Offset within structure to Month value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wDayOfWeekOffset">
            <summary>
            Offset within structure to DayOfWeek value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wDayOffset">
            <summary>
            Offset within structure to Day value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wHourOffset">
            <summary>
            Offset within structure to Hour value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wMinuteOffset">
            <summary>
            Offset within structure to Minute value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wSecondOffset">
            <summary>
            Offset within structure to Second value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wMillisecondsOffset">
            <summary>
            Offset within structure to Millisecond value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.Empty">
            <summary>
            Represents an empty SystemTime structure.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.Byte[])">
            <summary>
            Construct a SystemTime from a byte array
            </summary>   
            <remarks>This is used when setting a time zone,   
            which contains two embedded SystemTime structures.</remarks>   
            <param name="bytes">Byte Array containing SystemTime data.</param> 
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a SystemTime from a portion of a byte array.
            </summary>   
            <remarks>This is used when setting a time zone,   
            which contains two embedded SystemTime structures.</remarks>   
            <param name="bytes">Byte Array containing SystemTime data.</param>   
            <param name="offset">Offset (in bytes) to SystemTime data.</param> 
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new SystemTime object with the specified parameters.                          /// Initializes a new SYSTEMTIME object with the specified parameters. 
            <param name="year">Specifies the current year.</param>
            <param name="month">Specifies the current month; January = 1, February = 2, and so on</param>
            <param name="day">Specifies the current day of the month.</param>
            <param name="hour">Specifies the current hour.</param>
            <param name="minute">Specifies the current minute.</param>
            <param name="second">Specifies the current second.</param>  
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.ToByteArray">
            <summary>
            Method to extract marshal-compatible 'structure' from the class.   
            </summary>   
            <returns>Byte Array containing the SystemTime data.</returns>   
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.DateTime)">
            <summary>
            Create a new SystemTime instance from an existing DateTime instance.
            </summary>
            <param name="dt">DateTime to create SystemTime from.</param>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor">
            <summary>
            Create a new empty SystemTime instance.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(OpenNETCF.Win32.SystemTime)~System.DateTime">
            <summary>
            Converts a SystemTime structure to a DateTime object.
            </summary>
            <param name="st">A SystemTime structure.</param>
            <returns>Equivalent date in the form of a <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(System.Int64)~OpenNETCF.Win32.SystemTime">
            <summary>
            Converts a 64bit FileTime value to a SystemTime structure.
            </summary>
            <param name="FileTime">FileTime.</param>
            <returns>A SystemTime structure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(OpenNETCF.Win32.SystemTime)~System.Int64">
            <summary>
            Converts a SystemTime structure to the equivalent FileTime 64bit integer.
            </summary>
            <param name="st"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.FromFileTime(System.Int64)">
            <summary>
            Returns a SystemTime equivalent to the specified operating system file timestamp.
            </summary>
            <param name="fileTime">A Windows file time.</param>
            <returns>A SystemTime value representing the date and time of fileTime.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.ToFileTime">
            <summary>
            Converts the value of this instance to the format of a local operating system file time.
            </summary>
            <returns>The value of this SystemTime in the format of a local operating system file time.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(OpenNETCF.Win32.SystemTime)~System.Byte[]">
            <summary>
            Converts a SystemTime structure to the equivalent binary data.
            </summary>
            <param name="st"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.FromDateTime(System.DateTime)">
            <summary>   
            Creates a new instance of SystemTime from an existing System.DateTime object   
            </summary>   
            <param name="dt">DateTime object to copy.</param>   
            <returns>SystemTime class matching the DateTime object.</returns>   
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.ToDateTime">
            <summary>   
            Returns a <see cref="T:System.DateTime"/> object with the same Date and time as this instance.   
            </summary>   
            <returns>A <see cref="T:System.DateTime"/> copy of the SystemTime object.</returns>   
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Year">
            <summary>   
            Gets the year component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Month">
            <summary>   
            Gets the month component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.DayOfWeek">
            <summary>   
            The Day of the week. Sunday = 0, Monday = 1, and so on.   
            </summary>   
            <remarks>Because the numbering scheme matches the System.DayOfWeek enumeration,   
            it is possible to cast this field to DayOfWeek.</remarks> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Day">
            <summary>   
            Gets the day of the month represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Hour">
            <summary>   
            Gets the hour component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Minute">
            <summary>   
            Gets the minute component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Second">
            <summary>   
            Gets the seconds component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Milliseconds">
            <summary>   
            Gets the milliseconds component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="T:OpenNETCF.Threading.Semaphore">
            <summary>
            Limits the number of threads that can access a resource, or a particular type of resource, concurrently.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.Semaphore"/> class, specifying the maximum number of concurrent entries, and optionally reserving some entries for the calling thread.
            </summary>
            <param name="initialCount"> The initial number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="maximumCount">The maximum number of requests for the semaphore that can be satisfied concurrently.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.Semaphore"/> class, specifying the maximum number of concurrent entries, optionally reserving some entries for the calling thread, and optionally specifying the name of a system semaphore object.
            </summary>
            <param name="initialCount"> The initial number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="maximumCount">The maximum number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="name">The name of a system-wide named semaphore object.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.Semaphore"/> class, specifying the maximum number of concurrent entries, optionally reserving some entries for the calling thread, optionally specifying the name of a system semaphore object, and specifying an out parameter that indicates whether a new system object was created.
            </summary>
            <param name="initialCount"> The initial number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="maximumCount">The maximum number of requests for the semaphore that can be satisfied concurrently.</param>
            <param name="name">The name of a system-wide named semaphore object.</param>
            <param name="createdNew"> When this method returns, contains true if a new system object was created; otherwise false. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.OpenExisting(System.String)">
            <summary>
            Opens an existing named semaphore.
            </summary>
            <param name="name">The name of a system semaphore.</param>
            <returns>A <see cref="T:OpenNETCF.Threading.Semaphore"/> object that represents a named system semaphore.</returns>
            <remarks>The OpenExisting method attempts to open only existing named semaphores.
            If a system semaphore with the specified name does not exist, this method throws an exception instead of creating the system semaphore.
            It is possible to create multiple <see cref="T:OpenNETCF.Threading.Semaphore"/> objects that represent the same named system semaphore.
            Two calls to this method with the same value for name do not necessarily return the same <see cref="T:OpenNETCF.Threading.Semaphore"/> object, even though the objects returned both represent the same named system semaphore.</remarks>
            <exception cref="T:System.ArgumentException">name is a zero-length string.
            -or-
            name is longer than 260 characters.</exception>
            <exception cref="T:System.ArgumentNullException">name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException">The named semaphore does not exist.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.Release">
            <summary>
            Exits the semaphore, returning the previous count.
            </summary>
            <returns>An integer value representing the count on the semaphore before the Overload:Semaphore.Release method was called.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.Release(System.Int32)">
            <summary>
            Exits the semaphore, returning the previous count.
            </summary>
            <param name="releaseCount">releaseCount: The number of times to exit the semaphore.</param>
            <returns>An integer value representing the count on the semaphore before the Overload:Semaphore.Release method was called.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">releaseCount is less than 1.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.WaitOne">
            <summary>
            When overridden in a derived class, blocks the current thread until the current Threading.WaitHandle receives a signal.
            </summary>
            <returns>true if the current instance receives a signal. if the current instance is never signaled, WaitHandle.WaitOne() never returns.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.WaitOne(System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current Threading.WaitHandle receives a signal, using 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Threading.Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current instance receives a signal, using a TimeSpan to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="aTs">A TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.Close">
            <summary>
            Releases all resources held by the current <see cref="T:System.Threading.WaitHandle"/>
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Semaphore.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="explicitDisposing"></param>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.Notify">
            <summary>
            Contains Notification related Methods.
            </summary>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.RunAppAtEvent(System.String,OpenNETCF.WindowsCE.Notification.NotificationEvent)">
            <summary>   
            This function starts running an application when a specified event occurs.   
            </summary>   
            <param name="appName">Name of the application to be started.</param>   
            <param name="whichEvent">Event at which the application is to be started.</param>   
            <seealso cref="T:OpenNETCF.WindowsCE.Notification.NotificationEvent"/>   
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.RunAppAtTime(System.String,System.DateTime)">
            <summary>   
            This function prompts the system to start running a specified application at a specified time.   
            </summary>   
            <param name="appName">Name of the application to be started.</param>   
            <param name="time">DateTime at which to run application.</param>
            <remarks>To cancel an existing RunAppATime request pass the application name and DateTime.MinValue</remarks>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.SetNamedEventAtTime(System.String,System.DateTime)">
            <summary>
            This function will cause a named system event to be set at the given time.
            </summary>
            <remarks>If suspended, the device will wake to fulfill this notification</remarks>
            <param name="eventName">String name of the event to set</param>
            <param name="eventTime">Time at which to set the event</param>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.SetNamedEventAtTime(System.String,System.TimeSpan)">
            <summary>
            This function will cause a named system event to be set at the given time.
            </summary>
            <remarks>If suspended, the device will wake to fulfill this notification</remarks>
            <param name="eventName">String name of the event to set</param>
            <param name="timeFromNow">TimeSpan from Now for the event to be set</param>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.SetUserNotification(System.String,System.DateTime,OpenNETCF.WindowsCE.Notification.UserNotification)">
            <summary>
            Creates a new user notification.
            </summary>
            <param name="application">String that specifies the name of the application that owns this notification.</param>
            <param name="time">The time when the notification should occur.</param>
            <param name="notify">Notification object that describes the events that are to occur when the notification time is reached.</param>
            <returns>The handle to the notification indicates success.</returns>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.SetUserNotification(System.Int32,System.String,System.DateTime,OpenNETCF.WindowsCE.Notification.UserNotification)">
            <summary>
            Edit an existing user notification.
            </summary>
            <param name="handle">Handle to the notification to overwrite.</param>
            <param name="application">String that specifies the name of the application that owns this notification.</param>
            <param name="time">The time when the notification should occur.</param>
            <param name="notify">Notification object that describes the events that are to occur when the notification time is reached.</param>
            <returns>The handle to the notification indicates success.</returns>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.SetUserNotification(OpenNETCF.WindowsCE.Notification.UserNotificationTrigger,OpenNETCF.WindowsCE.Notification.UserNotification)">
            <summary>
            This function creates a new user notification.
            </summary>
            <param name="trigger">A UserNotificationTrigger that defines what event activates a notification.</param>
            <param name="notification">A UserNotification that defines how the system should respond when a notification occurs.</param>
            <returns>Handle to the notification event if successful.</returns>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.SetUserNotification(System.Int32,OpenNETCF.WindowsCE.Notification.UserNotificationTrigger,OpenNETCF.WindowsCE.Notification.UserNotification)">
            <summary>
            This function modifies an existing user notification.
            </summary>
            <param name="handle">Handle of the Notification to be modified</param>
            <param name="trigger">A UserNotificationTrigger that defines what event activates a notification.</param>
            <param name="notification">A UserNotification that defines how the system should respond when a notification occurs.</param>
            <returns>Handle to the notification event if successful.</returns>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.ClearUserNotification(System.Int32)">
            <summary>
            Deletes a registered user notification that was created by a previous call to the SetUserNotification function.
            </summary>
            <param name="handle">Handle to the user notification to delete.</param>
            <returns>TRUE indicates success. FALSE indicates failure.</returns>
            <remarks>ClearNotification does not operate on notifications that have occurred.</remarks>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.GetUserNotification(System.Int32)">
            <summary>
            Retrieves notification information associated with a handle.
            </summary>
            <param name="handle">Handle to the user notification to retrieve.</param>
            <returns>The requested <see cref="T:OpenNETCF.WindowsCE.Notification.UserNotificationInfoHeader"/>.</returns>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.GetUserNotificationHandles">
            <summary>
            Returns an array of currently stored notifications.
            </summary>
            <returns>Array of currently stored notifications.</returns>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.GetUserNotificationPreferences(System.IntPtr)">
            <summary>
            This function queries the user for notification settings by displaying a dialog box showing options that are valid for the current hardware platform.
            </summary>
            <param name="hWnd">Handle to the parent window for the notification settings dialog box.</param>
            <returns>A UserNotification structure containing the user's notification settings.</returns>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.GetUserNotificationPreferences(System.IntPtr,OpenNETCF.WindowsCE.Notification.UserNotification)">
            <summary>
            This function queries the user for notification settings by displaying a dialog box showing options that are valid for the current hardware platform.
            </summary>
            <param name="hWnd">Handle to the parent window for the notification settings dialog box.</param>
            <param name="template">UserNotification structure used to populate the default settings.</param>
            <returns>A UserNotification structure containing the user's notification settings.</returns>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Notify.HandleAppNotifications(System.String)">
            <summary>
            This function marks as "handled" all notifications previously registered by the given application that have occurred.
            </summary>
            <param name="application">The name of the application whose events are to be marked as "handled".
            This must be the name that was passed in to <see cref="M:OpenNETCF.WindowsCE.Notification.Notify.SetUserNotification(System.String,System.DateTime,OpenNETCF.WindowsCE.Notification.UserNotification)"/> as the owner of the notification.</param>
        </member>
        <member name="T:OpenNETCF.IO.StreamInterfaceDriver">
            <summary>
            Use this abstract base class to create wrappers around Stream Interface
            Drivers that are not supported by the CF
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl(System.UInt32,System.Byte[])">
            <summary>
            Call a device specific IOControl
            </summary>
            <param name="controlCode">The IOCTL code</param>
            <param name="inData">Data to pass into the IOCTL</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl(System.UInt32)">
            <summary>
            Call a device specific IOControl
            </summary>
            <param name="controlCode">The IOCTL code</param>
        </member>
        <member name="F:OpenNETCF.IO.StreamInterfaceDriver.m_hPort">
            <summary>
            Internal native handle to the open port
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.#ctor(System.String)">
            <summary>
            Create an instance of the StreamInterfaceDriver class
            </summary>
            <param name="portName">Name of port (prefix and index) to open</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.#ctor">
            <summary>
            Create an instance of the StreamInterfaceDriver class
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Open(System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Open the driver
            </summary>
            <param name="access">File Access (Read, Write or Both)</param>
            <param name="share">Share Mode (Read, Write or both)</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Read(System.Int32)">
            <summary>
            Read data from the driver
            </summary>
            <param name="bytesToRead">The number of bytes requested.</param>
            <returns>A byte array returned by the driver</returns>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Write(System.Byte[])">
            <summary>
            Write data to the driver
            </summary>
            <param name="data">Data to write</param>
            <returns>Number of bytes actually written</returns>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Write(System.Byte[],System.Int32)">
            <summary>
            Write data to the driver
            </summary>
            <param name="data">Data to write</param>
            <param name="bytesToWrite">Number of bytes from passed in buffer to write</param>
            <returns>Number of bytes actually written</returns>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl(System.UInt32,System.Byte[],System.Byte[])">
            <summary>
            Call a device specific IOControl
            </summary>
            <param name="controlCode">The IOCTL code</param>
            <param name="inData">Data to pass into the IOCTL</param>
            <param name="outData">Data returned by the IOCTL</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            This function moves the file pointer of an open file
            <seealso cref="M:System.IO.File.Move(System.String,System.String)"/>
            </summary>
            <param name="distance">Bytes to move - a positive number moves forward, a negative moves backward</param>
            <param name="seekFrom">Starting position from where distance is measured</param>
            <returns>New file position</returns>
            <remarks>The current file position can be queried using seekFrom(0, MoveMethod.CurrentPosition)</remarks>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Close">
            <summary>
            Close the driver
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.StreamInterfaceDriver.PortName">
            <summary>
            Gets or Sets the Port Name
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.StreamInterfaceDriver.Handle">
            <summary>
            Gets the underlying native port Handle
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.StreamInterfaceDriver.IsOpen">
            <summary>
            Returns true if the port is open, otherwise returns false
            </summary>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.Marshal2">
            <summary>
            Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code. 
            </summary>
            <seealso cref="T:System.Runtime.InteropServices.Marshal"/>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadIntPtr(System.IntPtr,System.Int32)">
            <summary>
            Reads an IntPtr from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the IntPtr is located.</param>
            <returns>The IntPtr read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadUInt32(System.IntPtr,System.Int32)">
            <summary>
            Reads a 32-bit unsigned integer from unmanaged memory.
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to read.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before reading.</param>
            <returns>The 32-bit unsigned integer read from the ptr parameter.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadUInt16(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="ofs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.PtrToStringUni(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads a string from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the string is located.</param>
            <param name="len">Length in characters.</param>
            <returns>The string read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.PtrToStringAnsi(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Allocates a managed System.String, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.
            </summary>
            <param name="ptr">The address of the first character of the unmanaged string.</param>
            <param name="ofs"></param>
            <param name="len">The byte count of the input string to copy.</param>
            <returns>A managed System.String that holds a copy of the native ANSI string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.PtrToStringAnsi(System.IntPtr)">
            <summary>
            Copies all characters up to the first null from an unmanaged ANSI string to a managed System.String. Widens each ANSI character to Unicode.
            </summary>
            <param name="ptr">The address of the first character of the unmanaged string.</param>
            <returns>A managed <see cref="T:System.String"/> object that holds a copy of the unmanaged ANSI string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.PtrToStringAuto(System.IntPtr)">
            <summary>
            Allocates a managed <see cref="T:System.String"/> and copies all characters up to the first null character from a string stored in unmanaged memory into it.
            </summary>
            <param name="ptr">The address of the first character.</param>
            <returns>A managed string that holds a copy of the unmanaged string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadChar(System.IntPtr,System.Int32)">
            <summary>
            Reads a single char from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the char is located.</param>
            <returns>The char read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadByteArray(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads a byte array from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the byte array is located.</param>
            <param name="len">The length of the byte array to read.</param>
            <returns>The byte array read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadUInt64(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="ofs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.ReadBool(System.IntPtr,System.Int32)">
            <summary>
            Reads a bool from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the bool is located.</param>
            <returns>The bool read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Writes an IntPtr value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the IntPtr from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteUInt32(System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            Writes a UInt32 value to unmanaged memory.
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteUInt16(System.IntPtr,System.Int32,System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer value to unmanaged memory.
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.StringToHGlobalAnsi(System.String)">
            <summary>
            Copies the contents of a managed <see cref="T:System.String"/> into unmanaged memory, converting into ANSI format as it copies.
            </summary>
            <param name="s">A managed string to be copied. </param>
            <returns>The address, in unmanaged memory, to where s was copied, or 0 if a null reference (Nothing in Visual Basic) string was supplied.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.StringToHGlobalUni(System.String)">
            <summary>
            Copies the contents of a managed <see cref="T:System.String"/> into unmanaged memory.
            </summary>
            <param name="s">A managed string to be copied.</param>
            <returns>The address, in unmanaged memory, to where s was copied, or 0 if a null reference (Nothing in Visual Basic) string was supplied.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteChar(System.IntPtr,System.Int32,System.Char)">
            <summary>
            Writes a single char value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the char from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteByteArray(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Writes a byte array to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the byte array from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteUInt64(System.IntPtr,System.Int32,System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer value to unmanaged memory.
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.WriteBool(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Writes a bool value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the bool from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.Time_tToDateTime(System.UInt32)">
            <summary>
            Converts a time_t value to a DateTime value.
            </summary>
            <param name="time_t">The time_t value to convert.</param>
            <returns>A DateTime value equivalent to the time_t suppled.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.lstrlenW(System.IntPtr)">
            <summary>
            Returns the length of the string at the pointer
            </summary>
            <param name="ptr">The pointer to the string to measure.</param>
            <returns>The length of the string at the pointer.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.GetHINSTANCE(System.Reflection.Module)">
            <summary>
            Returns the instance handle (HINSTANCE) for the specified module.
            </summary>
            <param name="m">The <see cref="T:System.Reflection.Module"/> whose HINSTANCE is desired.</param>
            <returns>The HINSTANCE for m; -1 if the module does not have an HINSTANCE.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.SetMemory(System.IntPtr,System.Byte,System.Int32)">
            <summary>
            Sets a region of unmanaged memory to a specified value
            </summary>
            <param name="destination">IntPtr address of the start of the region to set</param>
            <param name="value">The value to set for each byte in the reagion</param>
            <param name="length">Number of bytes to set</param>
            <exception cref="T:System.ArgumentException">Thrown if writing to destination for length bytes would be an invalid memory access</exception>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.SetMemory(System.IntPtr,System.Byte,System.Int32,System.Boolean)">
            <summary>
            Sets a region of unmanaged memory to a specified value
            </summary>
            <param name="destination">IntPtr address of the start of the region to set</param>
            <param name="value">The value to set for each byte in the reagion</param>
            <param name="length">Number of bytes to set</param>
            <param name="boundsCheck">when true the function verifies that the requiested write operation is safe</param>
            <exception cref="T:System.ArgumentException">Thrown if writing to destination for length bytes would be an invalid memory access</exception>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.Copy(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies data from an unmanaged memory pointer to another unmanaged memory pointer
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of bytes to copy</param>
            <exception cref="T:System.ArgumentException">Thrown if either the requested write or read for length bytes would be an invalid memory access</exception>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.Copy(System.IntPtr,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Copies data from an unmanaged memory pointer to another unmanaged memory pointer
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of bytes to copy</param>
            <param name="boundsCheck">When true the function verifies that the requiested write and read operations are safe</param>
            <exception cref="T:System.ArgumentException">Thrown if either the requested write or read for length bytes would be an invalid memory access</exception>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.IsSafeToWrite(System.IntPtr,System.Int32)">
            <summary>
            Checks to determine if a write to an unmanaged memory pointer for a specied number of bytes is a safe operation
            </summary>
            <param name="destination">Unmanaged memory pointer to check</param>
            <param name="length">Number of bytes to check</param>
            <returns>Returns true if a write of the specifed length is safe, otherwise false</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.Marshal2.IsSafeToRead(System.IntPtr,System.Int32)">
            <summary>
            Checks to determine if a read from an unmanaged memory pointer for a specied number of bytes is a safe operation
            </summary>
            <param name="source">Unmanaged memory pointer to check</param>
            <param name="length">Number of bytes to check</param>
            <returns>Returns true if a read from the specifed length is safe, otherwise false</returns>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.UserNotification">
            <summary>
            Contains information used for a user notification.
            </summary>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.UserNotification.#ctor">
            <summary>
            Create a new instance of the UserNotification class
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotification.Action">
            <summary>
            Any combination of the <see cref="T:OpenNETCF.WindowsCE.Notification.NotificationAction"/> members.  
            </summary>
            <value>Flags which specifies the action(s) to be taken when the notification is triggered.</value>
            <remarks>Flags not valid on a given hardware platform will be ignored.</remarks>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotification.Title">
            <summary>
            Required if NotificationAction.Dialog is set, ignored otherwise
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotification.Text">
            <summary>
            Required if NotificationAction.Dialog is set, ignored otherwise.
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotification.Sound">
            <summary>
            Sound string as supplied to PlaySound.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.RenamedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:FileSystemMonitor.Renamed"/> event of a <see cref="!:FileSystemMonitor"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:OpenNETCF.IO.RenamedEventArgs"/> that contains the event data.</param>
            <seealso cref="T:OpenNETCF.IO.RenamedEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventHandler"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
        </member>
        <member name="T:OpenNETCF.IO.RenamedEventArgs">
            <summary>
            Provides data for the Renamed event.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileSystemEventArgs">
            <summary>
            Provides data for the directory events: <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/>, <see cref="E:OpenNETCF.IO.FileSystemWatcher.Created"/>, <see cref="!:FileSystemMonitor.Deleted"/>.
            </summary>
            <remarks>The <b>FileSystemEventArgs</b> class is passed as a parameter to event handlers for these events:
            <para>The <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/> event occurs when changes are made to the size, system attributes, last write time, last access time, or security permissions in a file or directory in the specified <see cref="!:FileSystemMonitor.Path"/> of a <see cref="!:FileSystemMonitor"/>.</para>
            <para>The <see cref="E:OpenNETCF.IO.FileSystemWatcher.Created"/> event occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> of a <see cref="!:FileSystemMonitor"/> is created.</para>
            <para>The <see cref="E:OpenNETCF.IO.FileSystemWatcher.Deleted"/> event occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> of a <see cref="!:FileSystemMonitor"/> is deleted. For more information, see <see cref="!:FileSystemMonitor"/>.</para></remarks>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemEventArgs.#ctor(OpenNETCF.IO.WatcherChangeTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.IO.FileSystemEventArgs"/> class.
            </summary>
            <param name="changeType">One of the <see cref="T:OpenNETCF.IO.WatcherChangeTypes"/> values, which represents the kind of change detected in the file system.</param>
            <param name="directory">The root directory of the affected file or directory.</param>
            <param name="name">The name of the affected file or directory.</param>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemEventArgs.ChangeType">
            <summary>
            Gets the type of directory event that occurred.
            </summary>
            <value>One of the <see cref="T:OpenNETCF.IO.WatcherChangeTypes"/> values that represents the kind of change detected in the file system.</value>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.WatcherChangeTypes"/>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemEventArgs.FullPath">
            <summary>
            Gets the fully qualifed path of the affected file or directory.
            </summary>
            <value>The path of the affected file or directory.</value>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemEventArgs.Name">
            <summary>
            Gets the name of the affected file or directory.
            </summary>
            <value>The name of the affected file or directory.</value>
        </member>
        <member name="P:OpenNETCF.IO.RenamedEventArgs.OldFullPath">
            <summary>
            Gets the previous fully qualified path of the affected file or directory.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.RenamedEventArgs.OldName">
            <summary>
            Gets the old name of the affected file or directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.ConnectionInfo">
            <summary>
            Summary description for ConnectionInfo.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.Thread2">
            <summary>
            Creates and controls a thread, sets its priority, and gets its status.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Sleep(System.Int32)">
            <summary>
            Blocks the current thread for the specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">Amount of time to block</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Sleep(System.TimeSpan)">
            <summary>
            Blocks the current thread for the specified span of time.
            </summary>
            <param name="timeout">Amount of time to block</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.AllocateDataSlot">
            <summary>
            Allocates an unnamed data slot on all the threads.
            </summary>
            <returns>A <see cref="T:System.LocalDataStoreSlot"/>.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.AllocateNamedDataSlot(System.String)">
            <summary>
            Allocates a named data slot on all threads.
            </summary>
            <param name="name">The name of the data slot to be allocated.</param>
            <returns>A <see cref="T:System.LocalDataStoreSlot"/>.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.FreeNamedDataSlot(System.String)">
            <summary>
            Eliminates the association between a name and a slot, for all threads in the process.
            </summary>
            <param name="name">The name of the data slot to be freed.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.GetData(System.LocalDataStoreSlot)">
            <summary>
            Retrieves the value from the specified slot on the current thread.
            </summary>
            <param name="slot">The <see cref="T:System.LocalDataStoreSlot"/> from which to get the value.</param>
            <returns>The value retrieved</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.GetNamedDataSlot(System.String)">
            <summary>
            Looks up a named data slot.
            </summary>
            <param name="name">The name of the local data slot.</param>
            <returns>A <see cref="T:System.LocalDataStoreSlot"/> allocated for this thread.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.SetData(System.LocalDataStoreSlot,System.Object)">
            <summary>
            Sets the data in the specified slot on the currently running thread, for that thread's current domain.
            </summary>
            <param name="slot">The <see cref="T:System.LocalDataStoreSlot"/> in which to set the value.</param>
            <param name="data">The value to be set.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.op_Implicit(OpenNETCF.Threading.Thread2)~System.Threading.Thread">
            <summary>
            Returns a <see cref="T:System.Threading.Thread"/> equivalent for the Thread2 instance
            </summary>
            <param name="thread2">The Thread2 to convert</param>
            <returns>A <see cref="T:System.Threading.Thread"/></returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the Thread2 class.
            </summary>
            <param name="start">A <see cref="T:System.Threading.ThreadStart"/> delegate that references the methods to be invoked when this thread begins executing.</param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Start">
            <summary>
            Causes the operating system to change the state of the current instance to <see cref="F:OpenNETCF.Threading.ThreadState.Running"/>.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Suspend">
            <summary>
            Either suspends the thread, or if the thread is already suspended, has no effect.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Resume">
            <summary>
            Resumes a thread that has been suspended.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Abort(System.Object)">
            <summary>
            Raises a <see cref="T:System.Threading.ThreadAbortException"/> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.
            </summary>
            <param name="stateInfo"></param>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Abort">
            <summary>
            Raises a <see cref="T:System.Threading.ThreadAbortException"/> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Join">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses.
            </summary>
            <returns><b>true</b> if the thread has terminated;</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Join(System.TimeSpan)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses.
            </summary>
            <param name="timeout"></param>
            <returns><b>true</b> if the thread has terminated; <b>false</b> if the thread has not terminated after the amount of time specified by the <i>timeout</i> parameter has elapsed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.Thread2.Join(System.Int32)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate.</param>
            <returns><b>true</b> if the thread has terminated; <b>false</b> if the thread has not terminated after the amount of time specified by the <i>millisecondsTimeout</i> parameter has elapsed.</returns>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.Name">
            <summary>
            Gets or sets the name of the thread.
            </summary>
            <value>A string containing the name of the thread, or a null reference (Nothing in Visual Basic) if no name was set.</value>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.ManagedThreadId">
            <summary>
            Gets a unique identifier for the current managed thread
            </summary>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a thread is a background thread
            </summary>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread.
            </summary>
            <value><b>true</b> if this thread has been started and has not terminated normally or aborted; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a thread.
            </summary>
            <value>One of the <see cref="T:System.Threading.ThreadPriority"/> values. The default value is Normal.</value>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.RealTimeQuantum">
            <summary>
            Gets or sets a Thread2's quantum in milliseconds.  Use zero for "run to completion". Unless modified by the OEM, the system default is 100ms
            </summary>
            <remarks>
            <b>WARNING:</b> Adjusting a thread quantum with this property can lead to application and even device deadlock or unpredictability.  Use only with caution and strong knowledge of the target system.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.RealTimePriority">
            <summary>
            Gets or sets a priority value outside of application priority space
            </summary>
            <remarks>
            <b>WARNING:</b> Adjusting a thread priority with this property can lead to application and even device deadlock or unpredictability.  Use only with caution and strong knowledge of the target system.  Do <u>not</u> use this Property for normal Priority settings.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Threading.Thread2.State">
            <summary>
            Returns the Thread2 instance's current <see cref="T:OpenNETCF.Threading.ThreadState"/>
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.ThreadState">
            <summary>
            Specifies the execution states of a <see cref="T:OpenNETCF.Threading.Thread2"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Unstarted">
            <summary>
            Thread is unstarted.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Running">
            <summary>
            Thread is running.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.WaitSleepJoin">
            <summary>
            Thread is waiting in a Join.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.SuspendRequested">
            <summary>
            Suspend has been called but not acted upon.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Suspended">
            <summary>
            Thread is suspended.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Stopped">
            <summary>
            Thread has either terminated or been Aborted.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.PhysicalAddressPointer">
            <summary>
            This class is used to access memory mapped addresses
            You can cause serious problems using this class without knowing what you're doing!
            We reiterate the statement in our license that OpenNETCF provides absolutely no warranty on this code and you use it at your own risk
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.#ctor(System.UInt32,System.UInt32)">
            <summary>
            An accessor class to a physical memory address.
            </summary>
            <param name="physicalAddress">Physical Address to map</param>
            <param name="size">Minimum size of the desired allocation</param>
            <remarks>The physical address does not need to be aligned as the PhysicalAddressPointer will handle alignment
            The size value will aligned to the next multiple of 4k internally, so the actual allocation may be larger than the requested value</remarks>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.#ctor(System.UInt32,System.Int32)">
            <summary>
            An accessor class to a physical memory address.
            </summary>
            <param name="physicalAddress">Physical Address to map</param>
            <param name="size">Minimum size of the desired allocation</param>
            <remarks>The physical address does not need to be aligned as the PhysicalAddressPointer will handle alignment
            The size value will aligned to the next multiple of 4k internally, so the actual allocation may be larger than the requested value</remarks>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteBytes(System.Byte[])">
            <summary>
            Write an array of bytes to the mapped physical address
            </summary>
            <param name="bytes">data to write</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteInt32(System.Int32)">
            <summary>
            Write a 32-bit value to the mapped address
            </summary>
            <param name="data">data to write</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteInt32(System.Int32,System.Int32)">
            <summary>
            Write a 32-bit value to the mapped address
            </summary>
            <param name="data">data to write</param>
            <param name="offset">offset to start writing the data</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteInt16(System.Int16)">
            <summary>
            Write a 16-bit value to the mapped address
            </summary>
            <param name="data">data to write</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.WriteByte(System.Byte)">
            <summary>
            Write an 8-bit value to the mapped address
            </summary>
            <param name="data">data to write</param>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadBytes(System.Int32)">
            <summary>
            Read a series of bytes from the mapped address
            </summary>
            <param name="length">number of bytes to read</param>
            <returns>read data</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadInt32">
            <summary>
            Read a 32-bit value from the mapped address
            </summary>
            <returns>read value</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadInt32(System.Int32)">
            <summary>
            Read a 32-bit value from the mapped address
            </summary>
            <returns>read value</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadInt16">
            <summary>
            Read a 16-bit value from the mapped address
            </summary>
            <returns>read value</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.ReadByte">
            <summary>
            Read an 8-bit value from the mapped address
            </summary>
            <returns>read value</returns>
        </member>
        <member name="M:OpenNETCF.IO.PhysicalAddressPointer.op_Explicit(OpenNETCF.IO.PhysicalAddressPointer)~System.IntPtr">
            <summary>
            Gets an IntPtr for the base of the PhysicalAddressPointer
            </summary>
            <param name="pap">PhysicalAddressPointer to get the address of</param>
            <returns>IntPtr of the base virtual address</returns>
        </member>
        <member name="T:OpenNETCF.Net.DestinationInfoCollection">
            <summary>
            Summary description for DestinationInfoCollection.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.DataEncoding">
            <summary>
            The data encoding that is primarily used for outgoing text message types.
            </summary>
            <preliminary/>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.DataEncoding.Optimal">
            <summary>
            Chooses the data encoding that fully represents all of the characters in the least amount of space.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.DataEncoding.Gsm">
            <summary>
            Use the default GSM 7-bit encoding specified in GSM specification 03.38 "Digital cellular telecommunications system (Phase 2+); Alphabets and language-specific information." Characters that cannot be represented by this encoding will not be transmitted correctly.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.DataEncoding.Ucs2">
            <summary>
            Use the Unicode UCS2 encoding.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.SmsMode">
            <summary>
            Specifies mode of the SMS object.
            </summary>
            <preliminary/>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.SmsMode.Receive">
            <summary>
            Sms is opened for receiving incoming messages.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.SmsMode.Send">
            <summary>
            Sms is opened for sending outgoing messages.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.DeliveryOptions">
            <summary>
            Specifies options for delivery of an SMS Message.
            </summary>
            <preliminary/>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.DeliveryOptions.None">
            <summary>
            No special options
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.DeliveryOptions.NoRetry">
            <summary>
            Unless this option is specified, the router will retry sending the SMS message according to a pre-defined short-term retry schedule.
            If this option is specified, no retries will be attempted.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.MessageStatus">
            <summary>
            Specifies the state of an SMS Message.
            </summary>
            <preliminary/>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.BroadcastLanguage">
            <summary>
            Indicates the languages that the mobile device provides.
            </summary>
            <preliminary/>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.MessageClass">
            <summary>
            Determines the class of the SMS Message.
            </summary>
            <preliminary/>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.MessageClass.Class0">
            <summary>
            The message should be displayed immediately but not stored.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.MessageClass.Class1">
            <summary>
            The message should be stored and an acknowledgement should be sent to the Service Center when it is stored.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.MessageClass.Class2">
            <summary>
            The message should be transferred to the SMS data field in the subscriber identity module (SIM) before an acknowledgement is sent to the Service Center.
            If the message cannot be stored in the SIM and there is other short message storage available, an unspecified protocol error message is returned to the Service Center.
            See GSM specification 04.11 "Digital cellular telecommunications system (Phase 2+); Point-to-Point (PP) Short Message Service (SMS) support on mobile radio interface" for more detail.
            If all the short message storage is already in use, a memory error message is returned to the Service Center.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.MessageClass.Class3">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.MessageClass.ClassUnspecified">
            <summary>
            When the message has successfully reached the destination and can be stored, an acknowledgement is sent to the Service Center.
            See GSM specification 07.05 "Digital cellular telecommunications system (Phase 2+); Use of Data Terminal Equipment - Data Circuit terminating; Equipment (DTE - DCE) interface for Short Message Service (SMS) and Cell Broadcast Service (CBS)" for more detail.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.ReplaceOption">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.MessageOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.MessageOptions.None">
            <summary>
            No options are specified.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.MessageOptions.ReplyPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.MessageOptions.StatusReport">
            <summary>
            Requests a delivery status report.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.MessageOptions.Discard">
            <summary>
            Sets the Discard bit for the message.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.NotificationMessageWaitingType">
            <summary>
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.NotificationIndicatorType">
            <summary>
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.NotificationCommandLine">
            <summary>
            Strings passed on the command line when an event occurs that the app has requested via CeRunAppAtEvent.  
            </summary>
            <remarks>Note that some of these strings will be used as the command line *prefix*, since the rest of the command line will be used as a parameter.</remarks>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAtTime">
            <summary>
            String passed on the command line when an app is run as the result of a call to <see cref="M:OpenNETCF.Win32.Notify.Notify.RunAppAtTime"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunToHandleNotification">
            <summary>
            Prefix of the command line when the user requests to run the application that "owns" a notification.  It is followed by a space, and the stringized version of the notification handle.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAfterTimeChange">
            <summary>
            Prefix of the command line when the user requests to run the application when the system time settings are changed.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAfterSync">
            <summary>
            Prefix of the command line when the user requests to run the application after synchronisation.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAtAcPowerOn">
            <summary>
            Prefix of the command line when the user requests to run the application when the device is connected to AC power.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAtAcPowerOff">
            <summary>
            Prefix of the command line when the user requests to run the application when the AC power is disconnected.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAtNetConnect">
            <summary>
            Prefix of the command line when the user requests to run the application when the device connects to a LAN.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAtNetDisconnect">
            <summary>
            Prefix of the command line when the user requests to run the application when the device disconnects from a LAN.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAtDeviceChange">
            <summary>
            Prefix of the command line when the user requests to run the application that "owns" a notification.  It is followed by a space, and the stringized version of the notification handle.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAtIrDiscovery">
            <summary>
            Prefix of the command line when the user requests to run the application when another device is discovered using IR.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAtRs232Detect">
            <summary>
            Prefix of the command line when the user requests to run the application when a serial port connection is attempted.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAfterRestore">
            <summary>
            Prefix of the command line when the user requests to run the application after a system restore.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAfterWakeup">
            <summary>
            Prefix of the command line when the user requests to run the application when the device wakes up from standby.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAfterTzChange">
            <summary>
            Prefix of the command line when the user requests to run the application when the device time-zone is changed.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationCommandLine.AppRunAfterExtendedEvent">
            <summary>
            Prefix of the command line when the user requests to run the application after an extended event.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.WatcherChangeTypes">
            <summary>
            Changes that might occur to a file or directory.
            </summary>
            <remarks>Each <see cref="T:OpenNETCF.IO.WatcherChangeTypes"/> member is associated with an event in <see cref="!:FileSystemMonitor"/>.
            For more information on the events, see <see cref="!:FileSystemMonitor.Changed"/>, <see cref="!:FileSystemMonitor.Created"/>, <see cref="!:FileSystemMonitor.Deleted"/> and <see cref="!:FileSystemMonitor.Renamed"/>.</remarks>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.All">
            <summary>
            The creation, deletion, change, or renaming of a file or folder. 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Changed">
            <summary>
            The change of a file or folder. The types of changes include: changes to size, attributes, security settings, last write, and last access time.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Created">
            <summary>
            The creation of a file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Deleted">
            <summary>
            The deletion of a file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Renamed">
            <summary>
            The renaming of a file or folder.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.NotifyFilters">
            <summary>
            Specifies changes to watch for in a file or folder.
            </summary>
            <remarks>You can combine the members of this enumeration to watch for more than one kind of change. For example, you can watch for changes in the size of a file or folder, and for changes in security settings. This raises an event anytime there is a change in size or security settings of a file or folder.</remarks>
            <seealso cref="!:FileSystemMonitor"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventHandler"/>
            <seealso cref="T:OpenNETCF.IO.RenamedEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.RenamedEventHandler"/>
            <seealso cref="T:OpenNETCF.IO.WatcherChangeTypes"/>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.Attributes">
            <summary>
            The attributes of the file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.CreationTime">
            <summary>
            The time the file or folder was created.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.DirectoryName">
            <summary>
            The name of the directory.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.LastAccess">
            <summary>
            The date the file or folder was last opened.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.LastWrite">
            <summary>
            The date the file or folder last had anything written to it.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.Security">
            <summary>
            The security settings of the file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.Size">
            <summary>
            The size of the file or folder.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileHelper">
            <summary>
            Provides additional file related functionality.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileHelper.MaxPath">
            <summary>
            Maximum length of Filepath string (in characters)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileHelper.InvalidHandle">
            <summary>
            Represents an invalid native operating system handle.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all text from the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all of the file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all text from the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all of the file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all of the file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all of the file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string array to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file using the specified encoding, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the encoding to apply to the string array.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, write the specified string array to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file using the specified encoding, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.GetAttributes(System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            <seealso cref="T:System.IO.FileAttributes"/>
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The FileAttributes of the file on the path, or -1 if the path or file is not found.</returns>
            <exception cref="T:System.ArgumentException">path is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException">path is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes"><seealso cref="T:System.IO.FileAttributes"/>The desired FileAttributes, such as Hidden, ReadOnly, Normal, and Archive.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in local time, that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastAccessTimeUtc">A DateTime containing the value to set for the last access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in local time, that the file was last accessed.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the last access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last updated or written to.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastWriteTimeUtc">A DateTime containing the value to set for the last write date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in local time, that the file was last updated or written to.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastWriteTime">A DateTime containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,OpenNETCF.IO.FileCreateDisposition,System.Int32)">
            <summary>
            Wrapper around the CreateFile API
            </summary>
            <param name="fileName">Path to the file or CE port name</param>
            <param name="desiredFileAccess">Specifies the type of access to the object. An application can obtain read access, write access, read-write (All) access.</param>
            <param name="shareMode">Specifies how the object can be shared.</param>
            <param name="creationDisposition">Specifies which action to take on files that exist, and which action to take when files do not exist.</param>
            <param name="flagsAndAttributes">Specifies the file attributes and flags for the file.</param>
            <returns>Handle to the created file</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.WriteFile(System.IntPtr,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            This function writes data to a file.
            </summary>
            <remarks> WriteFile starts writing data to the file at the position indicated by the file pointer. After the write operation has been completed, the file pointer is adjusted by the number of bytes actually written.</remarks>
            <param name="hFile">Handle to the file to be written to. The file handle must have been created with GENERIC_WRITE access to the file.</param>
            <param name="lpBuffer">Buffer containing the data to be written to the file.</param>
            <param name="nNumberOfBytesToWrite">Number of bytes to write to the file.</param>
            <param name="lpNumberOfBytesWritten">Number of bytes written by this function call. WriteFile sets this value to zero before doing any work or error checking.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.ReadFile(System.IntPtr,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            This function reads data from a file, starting at the position indicated by the file pointer. After the read operation has been completed, the file pointer is adjusted by the number of bytes actually read.
            </summary>
            <param name="hFile">Handle to the file to be read. The file handle must have been created with GENERIC_READ access to the file. This parameter cannot be a socket handle.</param>
            <param name="lpBuffer">Buffer that receives the data read from the file.</param>
            <param name="nNumberOfBytesToRead">Number of bytes to be read from the file.</param>
            <param name="lpNumberOfBytesRead">number of bytes read. ReadFile sets this value to zero before doing any work or error checking.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileHelper.CloseHandle(System.IntPtr)">
            <summary>
            This function closes an open object handle
            </summary>
            <param name="hObject">Object Handle, Could be any of the following Objects:- Communications device, Mutex, Database, Process, Event, Socket, File or Thread</param>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.Sms">
            <summary>
            Provides access to the SMS functionality on Pocket PC Phone Edition and Smartphone devices.
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.Sms.m_handle">
            <summary>
            SMS Handle
            </summary>
        </member>
        <member name="F:OpenNETCF.Phone.Sms.Sms.m_eventhandle">
            <summary>
            Event Handle
            </summary>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.#ctor">
            <summary>
            Creates a new instance of SmsSender for sending.
            </summary>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.#ctor(OpenNETCF.Phone.Sms.SmsMode)">
            <summary>
            Creates a new instance of Sms with specified mode.
            </summary>
            <param name="mode">SmsMode (Send  and/or Receive)</param>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.#ctor(System.String,OpenNETCF.Phone.Sms.SmsMode)">
            <summary>
            Creates a new instance of Sms with specified mode and provider.
            </summary>
            <param name="provider">Message provider to use.</param>
            <param name="mode">SmsMode (Send  and/or Receive)</param>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.SendMessage(OpenNETCF.Phone.Sms.SmsAddress,System.Byte[])">
            <summary>
            Sends a binary SMS message to the specified address.
            </summary>
            <param name="destination">Address of recipient.</param>
            <param name="message">Binary representation of message contents.</param>
            <returns>An identifier for the message which can be used to check the status.</returns>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.SendMessage(OpenNETCF.Phone.Sms.SmsAddress,System.Byte[],OpenNETCF.Phone.Sms.ProviderSpecificData)">
            <summary>
            Sends a binary SMS message to the specified address with the specified provider specific options.
            </summary>
            <param name="destination">Address of recipient.</param>
            <param name="message">Binary representation of message contents.</param>
            <param name="providerData"></param>
            <returns>An identifier for the message which can be used to check the status.</returns>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.SendMessage(OpenNETCF.Phone.Sms.SmsAddress,System.String,OpenNETCF.Phone.Sms.ProviderSpecificData)">
            <summary>
            Sends a text SMS message to the specified address with the specified provider specific options.
            </summary>
            <param name="destination">Address of recipient.</param>
            <param name="message">Message body as a string.</param>
            <param name="providerData">Provider specific options.</param>
            <returns>An identifier for the message which can be used to check the status.</returns>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.SendMessage(OpenNETCF.Phone.Sms.SmsAddress,System.String)">
            <summary>
            Sends a text SMS message to the specified address.
            </summary>
            <param name="destination">Address of recipient.</param>
            <param name="message">Message body as a string.</param>
            <returns>An identifier for the message which can be used to check the status.</returns>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.GetStatus(System.Int32)">
            <summary>
            Retrieves the status of a given SMS message.
            </summary>
            <param name="messageid">The message id, retrieved from the SendMessage method.</param>
            <returns>An SmsMessageStatus structure containing status information, or null (Nothing in VB) if unavailable.</returns>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.GetStatus(System.Int32,System.Int32)">
            <summary>
            Retrieves the status of a given SMS message, waiting within a specified timeout.
            </summary>
            <param name="messageid">The message id, retrieved from the SendMessage method.</param>
            <param name="timeout">Timeout in milliseconds to wait for a response.</param>
            <returns>An SmsMessageStatus structure containing status information, or null (Nothing in VB) if unavailable.</returns>
        </member>
        <member name="M:OpenNETCF.Phone.Sms.Sms.Close">
            <summary>
            Closes the Sms system releasing system resources.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.Sms.Time">
            <summary>
            Returns an estimate of the current time from the SMSC clock.
            </summary>
            <returns>Estimated current time</returns>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.Sms.PhoneNumber">
            <summary>
            Retrieves the devices phone number.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.Sms.ServiceCentre">
            <summary>
            Retrieves the default SMSC
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileSystemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/>, <see cref="!:FileSystemMonitor.Created"/>, or <see cref="E:OpenNETCF.IO.FileSystemWatcher.Deleted"/> event of a <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:OpenNETCF.IO.FileSystemEventArgs"/> that contains the event data.</param>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.RenamedEventArgs"/>
        </member>
        <member name="T:OpenNETCF.Threading.SemaphoreFullException">
            <summary>
            The exception that is thrown when the <see cref="M:OpenNETCF.Threading.Semaphore.Release"/> method is called on a semaphore whose count is already at the maximum.
            </summary>
            <remarks>The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore.
            When the count is zero, subsequent requests block until other threads release the semaphore.
            When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.
            If a programming error causes a thread to call the <see cref="M:OpenNETCF.Threading.Semaphore.Release"/> method at this point, a <see cref="T:OpenNETCF.Threading.SemaphoreFullException"/> is thrown.</remarks>
        </member>
        <member name="M:OpenNETCF.Threading.SemaphoreFullException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.SemaphoreFullException"/> class with default values.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.SemaphoreFullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.SemaphoreFullException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:OpenNETCF.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.SemaphoreFullException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.TextProviderSpecificData">
            <summary>
            Summary description for TextProviderSpecificData.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.TextProviderSpecificData.MessageClass">
            <summary>
            Sets the message class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.TextProviderSpecificData.ReplaceOption">
            <summary>
            Text SMS messages with the appropriate flag can replace previously received notifications with a similar flag and originating address.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.TextProviderSpecificData.HeaderData">
            <summary>
            The information contained in the header.
            For multi-part messages, only the header from the first segment is returned.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.TextProviderSpecificData.ContainsEMSHeaders">
            <summary>
            Flag that indicates that at least one segment of this message contains EMS headers.
            Only set this flag if the EMS handler installed.
            </summary>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.TextProviderSpecificData.ProtocolID">
            <summary>
            The Protocol Identifier (PID) of an invoming message, or the desired PID of an outgoing message.
            This applies to GSM only.
            </summary>
        </member>
        <member name="T:OpenNETCF.Phone.Sms.SmsMessageStatus">
            <summary>
            Describes the status of an SMS message.
            </summary>
            <preliminary/>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.SmsMessageStatus.MessageID">
            <summary>
            A message identifier returned when calling SmsSendMessage.
            </summary>
            <preliminary/>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.SmsMessageStatus.Status">
            <summary>
            The status of the message.
            </summary>
            <preliminary/>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.SmsMessageStatus.RecipientAddress">
            <summary>
            The destination address of the message.
            </summary>
            <preliminary/>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.SmsMessageStatus.ServiceCenterTimeStamp">
            <summary>
            The time when the service center received the sent message.
            </summary>
            <remarks>For a status information response resulting from a multipart message, this field contains the most recent timestamp of all the multipart messages.</remarks>
            <preliminary/>
        </member>
        <member name="P:OpenNETCF.Phone.Sms.SmsMessageStatus.DischargeTime">
            <summary>
            The time pertaining to the particular outcome defined in <see cref="P:OpenNETCF.Phone.Sms.SmsMessageStatus.MessageStatus">MessageStatus</see>.
            </summary>
            <remarks>For a status information response resulting from a multipart message, this field contains the most recent discharge timestamp of all the multipart messages.</remarks>
            <preliminary/>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.NotificationEvent">
            <summary>   
            System Event Flags   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.None">
            <summary>   
            No events—remove all event registrations for this application.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.TimeChange">
            <summary>   
            When the system time is changed.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.SyncEnd">
            <summary>   
            When data synchronization finishes.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.OnACPower">
            <summary>
            The user turned the AC power on.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.OffACPower">
            <summary>
            The user turned the alternating current (AC) power off.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.NetConnect">
            <summary>
            The device connected to a network.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.NetDisconnect">
            <summary>
            The device disconnected from a network.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.DeviceChange">
            <summary>   
            When a PC Card device is changed.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.IRDiscovered">
            <summary>
            The device discovered a server by using infrared communications.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.RS232Detected">
            <summary>   
            When an RS232 connection is made.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.RestoreEnd">
            <summary>   
            When a full device data restore completes.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.Wakeup">
            <summary>   
            When the device wakes up.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.TimeZoneChange">
            <summary>   
            When the time zone is changed.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.MachineNameChange">
            <summary>
            When the machines name changes.
            Requires Windows CE.NET 4.2.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.RndisFNDetected">
            <summary>
            RNDISFN interface is instantiated.
            Requires Windows CE 5.0.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.NotificationEvent.InternetProxyChange">
            <summary>
            The Internet Proxy used by the device has changed.
            Requires Windows CE 5.0.
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.Led">
            <summary>
            Represents the collection of Notification Leds on the device.
            </summary>
            <remarks>Support varies depending on the device but all devices should include at least 1 notification LED</remarks>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Led.#ctor">
            <summary>
            Initialise the LED collection
            </summary>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.Led.SetLedStatus(System.Int32,OpenNETCF.WindowsCE.Notification.Led.LedState)">
            <summary>
            Set the state of the specified LED
            </summary>
            <param name="led">0 based index of the LED</param>
            <param name="newState">New state of the LED - see LedState enumeration</param>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.Led.Count">
            <summary>
            Returns the number of notification Leds in the system
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.Led.LedState">
            <summary>
            Defines the possible states for an LED
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.Led.LedState.Off">
            <summary>
            LED is off
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.Led.LedState.On">
            <summary>
            LED is on
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.Notification.Led.LedState.Blink">
            <summary>
            LED cycles between On and Off
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException">
            <summary>
            The exception that is thrown when an attempt is made to open a system mutex or semaphore that does not exist.
            </summary>
            <remarks>Instances of the Mutex class and the Semaphore class can represent named system synchronization objects.
            When you use the <see cref="M:OpenNETCF.Threading.NamedMutex.OpenExisting(System.String)"/> method or the <see cref="M:OpenNETCF.Threading.Semaphore.OpenExisting(System.String)"/> method to open a named system object that does not exist, a <see cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException"/> is thrown.</remarks>
        </member>
        <member name="M:OpenNETCF.Threading.WaitHandleCannotBeOpenedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException"/> class with default values.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:OpenNETCF.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.WaitHandleCannotBeOpenedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:OpenNETCF.Threading.SafeThreadHandle">
            <summary>
            This class is used a wrapper for the handle owned by a <c>ThreadEx</c> class
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.SafeThreadHandle.#ctor(OpenNETCF.Threading.SafeThreadHandle.CreateHandleDelegate)">
            <summary>
            Constructor for a SafeThreadHandle
            </summary>
            <param name="createHandleFunction"></param>
        </member>
        <member name="M:OpenNETCF.Threading.SafeThreadHandle.Open">
            <summary>
            Opens the instance of the SafeHandle by calling the <c>CreateHandleDelegate</c>
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.Notification.UserNotificationTrigger">
            <summary>
            Defines what event activates a notification.
            </summary>
        </member>
        <member name="M:OpenNETCF.WindowsCE.Notification.UserNotificationTrigger.#ctor">
            <summary>
            Create a new instance of <see cref="T:OpenNETCF.WindowsCE.Notification.UserNotificationTrigger"/>
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationTrigger.Type">
            <summary>
            Specifies the type of notification.
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationTrigger.Event">
            <summary>
            Specifies the type of event should Type = Event.
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationTrigger.Application">
            <summary>
            Name of the application to execute.
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationTrigger.Arguments">
            <summary>
            Command line (without the application name). 
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationTrigger.StartTime">
            <summary>
            Specifies the beginning of the notification period.
            </summary>
        </member>
        <member name="P:OpenNETCF.WindowsCE.Notification.UserNotificationTrigger.EndTime">
            <summary>
            Specifies the end of the notification period. 
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.Monitor2">
            <summary>
            Enhanced alternative to the <see cref="T:System.Threading.Monitor"/> class.
            Provides a mechanism that synchronizes access to objects.
            </summary>
            <seealso cref="T:System.Threading.Monitor"/>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.currentOwner">
            <summary>
            The owner of the monitor, or null if it's not owned
            by any thread.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.lockCount">
            <summary>
            Number of levels of locking (0 for an unowned
            monitor, 1 after a single call to Enter, etc).
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.stateLock">
            <summary>
            Object to be used as a monitor for state changing.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.waitPulseEvent">
            <summary>
            AutoResetEvent used to implement Wait/Pulse/PulseAll.
            Initially not signalled, so that a call to Wait will
            block until the first pulse.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.waitCounter">
            <summary>
            Number of threads waiting on this monitor.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.Monitor2.enterExitEvent">
            <summary>
            Event used for Enter/Exit. Initially signalled
            to allow the first thread to come in.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.#ctor">
            <summary>
            Creates a new monitor, not owned by any thread.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.Enter">
            <summary>
            Enters the monitor (locks it), blocking until the
            lock is held. If the monitor is already held by the current thread,
            its lock count is incremented.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.TryEnter">
            <summary>
            Attempts to enter the monitor (locking it) but does not block
            if the monitor is already owned.
            </summary>
            <returns>Whether or not the current thread now owns the monitor.
            </returns>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.Exit">
            <summary>
            Releases a level of locking, unlocking the monitor itself
            if the lock count becomes 0.
            </summary>
            <exception cref="T:OpenNETCF.Threading.SynchronizationLockException">If the current 
            thread does not own the monitor.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.Pulse">
            <summary>
            Pulses the monitor once - a single waiting thread will be released
            and continue its execution after the current thread has exited the
            monitor. Unlike Pulse on the normal framework, no guarantee is
            made about which thread is woken.
            </summary>
            <exception cref="T:OpenNETCF.Threading.SynchronizationLockException">If the 
            current thread does not own the monitor.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.PulseAll">
            <summary>
            Pulses the monitor such that all waiting threads are woken up.
            All threads will then try to regain the lock on this monitor.
            No order for regaining the lock is specified.
            </summary>
            <exception cref="T:OpenNETCF.Threading.SynchronizationLockException">If the current 
            thread does not own the monitor.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.Monitor2.Wait">
            <summary>
            Relinquishes the lock on this monitor (whatever the lock count is)
            and waits for the monitor to be pulsed. After the monitor has been 
            pulsed, the thread blocks again until it has regained the lock (at 
            which point it will have the same lock count as it had before), and 
            then the method returns.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.SynchronizationLockException">
            <summary>
            Exception thrown by <see cref="T:OpenNETCF.Threading.Monitor2"/> when threading rules
            are violated (usually due to an operation being
            invoked on a monitor not owned by the current thread).
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.SynchronizationLockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.SynchronizationLockException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.BatteryPercentageUnknown">
            <summary>
            The remaining battery power is unknown.
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction">
            <summary>
            Specifies the system-wide parameter to query or set.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetMouse">
            <summary>
            Retrieves the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetMouse">
            <summary>
            Sets the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetDeskWallpaper">
            <summary>
            For Windows CE 2.12 and later, sets the desktop wallpaper.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetDeskPattern">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetWorkArea">
            <summary>
            Sets the size of the work area — the portion of the screen not obscured by the system taskbar or by toolbars displayed on the desktop by applications.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetWorkArea">
            <summary>
            Retrieves the size of the work area on the primary screen.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetShowSounds">
            <summary>
            Retrieves whether the show sounds option is on or off.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetShowSounds">
            <summary>
            Turns the show sounds accessibility option on or off.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetWheelScrollLines">
            <summary>
            Gets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetWheelScrollLines">
            <summary>
            Sets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetFontSmoothingContrast">
            <summary>
            Retrieves a contrast value that is used in smoothing text displayed using Microsoft® ClearType®.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetFontSmoothingContrast">
            <summary>
            Sets the contrast value used when displaying text in a ClearType font.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetScreenSaveTimeout">
            <summary>
            Retrieves the screen saver time-out value, in seconds.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetScreenSaveTimeout">
            <summary>
            Sets the screen saver time-out value to the value of the uiParam parameter.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetBatteryIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on with battery power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetBatteryIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on with battery power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetExternalIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on with AC power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetExternalIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on with AC power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.SetWakeupIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on after a user notification that reactivates the suspended device.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetWakeupIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on after a user notification that reactivates a suspended device.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetPlatformType">
            <summary>
            Get the platform name e.g. PocketPC, Smartphone etc.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoAction.GetOemInfo">
            <summary>
            Get OEM specific information.
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoFlags">
            <summary>
            Specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoFlags.None">
            <summary>
            No notifications are sent on settings changed.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoFlags.UpdateIniFile">
            <summary>
            Writes the new system-wide parameter setting to the user profile.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.SystemParametersInfoFlags.SendChange">
            <summary>
            Broadcasts the WM_SETTINGCHANGE message after updating the user profile.
            </summary>
        </member>
        <member name="T:OpenNETCF.WindowsCE.NativeMethods.MemoryStatus">
            <summary>
            This structure contains information about current memory availability. The GlobalMemoryStatus function uses this structure.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.MemoryStatus.MemoryLoad">
            <summary>
            Specifies a number between 0 and 100 that gives a general idea of current memory utilization, in which 0 indicates no memory use and 100 indicates full memory use.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.MemoryStatus.TotalPhysical">
            <summary>
            Indicates the total number of bytes of physical memory.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.MemoryStatus.AvailablePhysical">
            <summary>
            Indicates the number of bytes of physical memory available.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.MemoryStatus.TotalPageFile">
            <summary>
            Indicates the total number of bytes that can be stored in the paging file. Note that this number does not represent the actual physical size of the paging file on disk.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.MemoryStatus.AvailablePageFile">
            <summary>
            Indicates the number of bytes available in the paging file.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.MemoryStatus.TotalVirtual">
            <summary>
            Indicates the total number of bytes that can be described in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="F:OpenNETCF.WindowsCE.NativeMethods.MemoryStatus.AvailableVirtual">
            <summary>
            Indicates the number of bytes of unreserved and uncommitted memory in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileFlags">
            <summary>
            CreateFile file flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.WriteThrough">
            <summary>
            Instructs the system to write through any intermediate cache and go directly to disk.
            The system can still cache write operations, but cannot lazily flush them.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.Overlapped">
            <summary>
            This flag is not supported; however, multiple read/write operations pending on a device at a time are allowed.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.RandomAccess">
            <summary>
            Indicates that the file is accessed randomly.
            The system can use this as a hint to optimize file caching.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.SequentialScan">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.DeleteOnClose">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.DestinationInfo">
            <summary>
            Contains information about a specific network.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DestinationInfo.NativeSize">
            <summary>
            Size of the DestinationInfo structure in unmanaged memory.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DestinationInfo.Guid">
            <summary>
            The destination's GUID identifier.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.DestinationInfo.Description">
            <summary>
            The destination's description.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.DestinationInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.DestinationInfo.#ctor(System.IntPtr)">
            <summary>
            Creates a new instance of DestinationInfo at the specific memory address.
            </summary>
            <param name="baseAddr">Memory address where the DestinationInfo object should be created.</param>
        </member>
    </members>
</doc>
